export PROJECT_ID=$(echo "observations-of-data-scientist")

export LOCATION=$(echo "europe-west9")

export dataset_name=$(echo "payAccess")
export TABLE_NAME=$(echo "payAccess_table")

gcloud config set project $PROJECT_ID

# Remove TABLE_name
bq rm -t $PROJECT_ID:$dataset_name.$TABLE_NAME

# https://cloud.google.com/bigquery/docs/schemas
bq mk --table $PROJECT_ID:$dataset_name.$TABLE_NAME accesskey:STRING,paid:BOOL
bq mk --table $PROJECT_ID:$dataset_name.$TABLE_NAME accesskey:STRING


# Add a value to the table
bq query --location=$LOCATION --allow_large_results --use_legacy_sql=false "INSERT INTO $dataset_name.$TABLE_NAME (accesskey, paid) VALUES('username', true);"

# View table 
bq query --location=$LOCATION --allow_large_results --use_legacy_sql=false 'SELECT * FROM `'$PROJECT_ID'.'$dataset_name'.'$TABLE_NAME'`;'


# Calendar API	
gcloud services disable calendar-json.googleapis.com

gcloud services enable driveactivity.googleapis.com

gcloud services enable drive.googleapis.com

gcloud services enable bigquery.googleapis.com

gcloud services enable people.googleapis.com


# ---------------------------------------------
# Try: make a Service Account and obtain an OAuth2 token 
# ---------------------------------------------

# Following instructions at: https://cloud.google.com/iam/docs/create-short-lived-credentials-direct?hl=en#rest

gcloud services enable iam.googleapis.com iamcredentials.googleapis.com

# Make a Service Account
export SERVICE_ACCOUNT_EMAIL=$(echo "j622amilah@gmail.com")
export SERVICE_ACCOUNT_ID=$(echo "observations-webappSA")
export SERVICE_ACCOUNT=$SERVICE_ACCOUNT_ID@$PROJECT_ID.iam.gserviceaccount.com

# ---------------------------------------------

# Create a service account

gcloud iam service-accounts create $SERVICE_ACCOUNT_ID --description="Creating a service account for a webapp" --display-name="Observations webapp"
# Created service account [observations-webappSA].

# ---------------------------------------------

# Delete a service account
# https://cloud.google.com/sdk/gcloud/reference/iam/service-accounts/delete

gcloud iam service-accounts delete $SERVICE_ACCOUNT
# deleted service account [observations-webapp-SA@observations-of-data-scientist.iam.gserviceaccount.com]

# ---------------------------------------------

# List service accounts in the project

gcloud iam service-accounts list
DISPLAY NAME: Observations webapp
EMAIL: observations-webapp-SA@observations-of-data-scientist.iam.gserviceaccount.com
DISABLED: False

# ---------------------------------------------

# Add a role to a service account (https://cloud.google.com/iam/docs/understanding-roles)

# Error, I did not read the directions
# roles/bigquery.admin - user
gcloud projects add-iam-policy-binding $PROJECT_ID --member="user:"$SERVICE_ACCOUNT_EMAIL --role='roles/bigquery.admin'
ACCOUNT_EMAIL --role='roles/bigquery.admin'
Updated IAM policy for project [observations-of-data-scientist].
bindings:
- members:
  - user:j622amilah@gmail.com
  role: roles/bigquery.admin
- members:
  - user:j622amilah@gmail.com
  role: roles/owner
etag: BwYMYcB1LT0=
version: 1

# ---------------------------------------------

# Add a role to a service account (https://cloud.google.com/iam/docs/understanding-roles)

# I went to https://cloud.google.com/iam/docs/reference/credentials/rest/v1/projects.serviceAccounts/generateAccessToken
and I read under 'Path parameters name' that I need to add this role iam.serviceAccounts.getAccessToken

# I went to https://cloud.google.com/iam/docs/understanding-roles, and searched getAccessToken and found the role below

# roles/iam.serviceAccountTokenCreator - user
gcloud projects add-iam-policy-binding $PROJECT_ID --member="user:"$SERVICE_ACCOUNT_EMAIL --role='roles/iam.serviceAccountTokenCreator'

Updated IAM policy for project [observations-of-data-scientist].
bindings:
- members:
  - user:j622amilah@gmail.com
  role: roles/bigquery.admin
- members:
  - user:j622amilah@gmail.com
  role: roles/iam.serviceAccountTokenCreator
- members:
  - user:j622amilah@gmail.com
  role: roles/owner
etag: BwYMYm5xh6A=
version: 1


# Need to look up how to to remove a role
- members:
  - user:j622amilah@gmail.com
  role: roles/bigquery.admin

# ---------------------------------------------

# Delete a user role from a service account (https://cloud.google.com/iam/docs/understanding-roles)

gcloud iam service-accounts remove-iam-policy-binding observations-webapp-SA@observations-of-data-scientist.iam.gserviceaccount.com --member='user:j622amilah@gmail.com' --role='roles/bigquery.admin'

# OR

gcloud iam service-accounts remove-iam-policy-binding $SERVICE_ACCOUNT --member="user:"$SERVICE_ACCOUNT_EMAIL --role='roles/bigquery.admin'

# ---------------------------------------------

# roles/iam.serviceAccountTokenCreator - serviceaccount
gcloud projects add-iam-policy-binding $PROJECT_ID --member=serviceAccount:$SERVICE_ACCOUNT --role="roles/iam.serviceAccountTokenCreator"

Updated IAM policy for project [observations-of-data-scientist].
bindings:
- members:
  - user:j622amilah@gmail.com
  role: roles/bigquery.admin
- members:
  - serviceAccount:observations-webappSA@observations-of-data-scientist.iam.gserviceaccount.com
  - user:j622amilah@gmail.com
  role: roles/iam.serviceAccountTokenCreator
- members:
  - user:j622amilah@gmail.com
  role: roles/owner
etag: BwYMZCf1xWc=
version: 1

# ---------------------------------------------

# Go to https://cloud.google.com/iam/docs/reference/credentials/rest/v1/projects.serviceAccounts/generateAccessToken and use the REST API to first be certain that the command parameters are correct, before trying to connect with JavaScript.

# I read somewhere that the required parameters are

name: the - after projects/ is called a wildcard character and is required; replacing it with a project ID is invalid. 

projects/-/serviceAccounts/observations-webappSA
"Invalid form of account ID observations-webappSA. Should be [Gaia ID |Email |Unique ID |] of the account"

projects/-/serviceAccounts/j622amilah@gmail.com
"Not found; Gaia id not found for email j622amilah@gmail.com"

projects/-/serviceAccounts/observations-webapp-SA@observations-of-data-scientist.iam.gserviceaccount.com

 A GAIA ID is an abbreviation of”Google Account and ID Administration” which is a unique ID of an account on Google. 


request body
{
  "lifetime": "300s",
  "scope": [
    "https://www.googleapis.com/auth/cloud-platform"
  ]
}


DOES NOT WORK
{
  "error": {
    "code": 400,
    "message": "Invalid form of account ID observations-webappSA. Should be [Gaia ID |Email |Unique ID |] of the account",
    "status": "INVALID_ARGUMENT"
  }
}
# ---------------------------------------------

# Tried with CLI - WORKS

# PRIV_SA: The email address of the privilege-bearing service account for which the short-lived token is created. 

DOES NOT WORK
PRIV_SA="j622amilah@gmail.com"
ERROR: (gcloud.auth.print-access-token) Failed to impersonate [PRIV_SA]. Make sure the account that's trying to impersonate it has access to the service account itself and the "roles/iam.serviceAccountTokenCreator" role.

WORKS!
PRIV_SA="observations-webappSA@observations-of-data-scientist.iam.gserviceaccount.com"
ERROR: (gcloud.auth.print-access-token) Failed to impersonate [PRIV_SA]. Make sure the account that's trying to impersonate it has access to the service account itself and the "roles/iam.serviceAccountTokenCreator" role.

gcloud auth print-access-token --impersonate-service-account=$PRIV_SA

You should receive a response similar to the following:
WARNING: This command is using service account impersonation. All API calls will be executed as [observations-webappSA@observations-of-data-scientist.iam.gserviceaccount.com].
ya29.c.c0AY_VpZjwFTqIwigssBqXmnZVjw1MVRam-Pkk3G8KaSYCde9gCgPnoJT2Wb4ujHtXzl1QuYafbmxOqkPZmZDOKTK-d_WR7MiEKBX-enhxuJCLIewEoq5up48ZAQoE8BbcY3nm9eRCRHKJ8E5j6FcoEHpv326sczTsw0WHYljX7daYV-YL2_G0DL1TSYJv3MoSUH2fb6U8PpdPYGX2LOtDvMoqcIROA8Xc5bRqpWZOrstm8hhYJfj6lrKb4n0wepi4N6AKq_MZME0ruCuN_gsf08VKQoO8NCxIV6gBWhP6GtUtt_NEFm-BRDuYX9fAacQRf75sLIbZe5cn6hYtPDv5KbLXZ6nQFRkBGyf12hFBJM2Ks1wqjR5BSpsxMYGP14IIl68oX8xhfIHnAcc3sjhtW7DHuc04sm9IgSjd31mgElrr8rDP6uRRtRm6qA4u-_9Zw4qEGXDSOtZ53zMVIvHnqCZISXcVTgPIWWcGx318e9wIu7Gf-FDITbkP0zLEwPujeIU6FjY-IoMSAHGjtJVrtRz26cXRpJD1l1Y7vjH26waAeT8fDp2T-8p5qlcWkIp-ewqgjRDmu2TaDgIc3fotRcloMDT3BlGwk9EuDBSPI1kYWgEcGRCFIC0Jaj9_wKxL17NEbGF9c1hTqZIcftP4H9d6krQ-IEQ9ZCSKQYUxLmDaE693CMRBVsilshdhvlO2XUWc9vht5ivlm2Q5u3-I8k3pcfuv6rynlaIdpbtYMw2x83YzmXQ15urxflbaZ19btFYoQWo83rfSop4yg0hRege-XfFu5kkrx45OsU90xWaZl4YO3kb-xMRS_VjFB-uoXQ4QVV4rpRsqdqbvs94gUq0mudXozx2k05V9Q7gU7Mjkv-jc1aYraJuJxQzFoY1c3-d4ubz7aUF-vOsXzc59XxxtcJibceOYRf86o4gRhtloWwbqU3d1SnUxl4ZfS0smxwBnOhMYY9UO7o47jtp9lpbyU5hcx-641j_ZlzXrviViehfV1zSuJ3I

# ---------------------------------------------






// ----------------------------------

To try

- 

functions that work
gapi.load('client:auth2', initializeGapiClient_way1);

gapi.client.init({apiKey: API_KEY, discoveryDocs: [DISCOVERY_DOC], client_id: CLIENT_ID, fetch_basic_profile: true});

      - can use a promise structure (then) to return values

// The JavaScript function that handles returned token response
var tokenClient = google.accounts.oauth2.initTokenClient({client_id: CLIENT_ID, scope: SCOPES, callback: ''});


FUNCTION that I did not try in the gapi library


functions that do not work
gapi.auth2.getAuthInstance().isSignedIn.get()
gapi.auth2.getAuthInstance().signIn();
gapi.auth2.getAuthInstance().signOut();
gapi.client.setApiKey(API_KEY)
gapi.auth.authorize({client_id: CLIENT_ID, scope: SCOPES, immediate: true}, handleAuthResult);

// ----------------------------------


// -----------------
      // Step 1: authorize the project scopes, "Callback after Google Identity Services are loaded."
      function init_way1_step1() {
        tokenClient = google.accounts.oauth2.initTokenClient({
          client_id: CLIENT_ID,
          scope: SCOPES,
          callback: '', 
        });
        
        // Verify that it successfully connected
        var initialized_scopes = true;
        document.getElementById("outData1").innerHTML = "initialized_scopes";
      }

      // -----------------

      // Step 2: the user needs to sign-in with the pop-up auth2 screen
      function init_way1_step2() {
        
        // Prints nothing
        // document.getElementById("outData2").innerHTML = gapi.client.getToken();

        // Printed
        // document.getElementById("outData2").innerHTML = "authorize_button: before";

        // Can not print anything in the callback
        tokenClient.callback = async (resp) => {
          try {
            document.getElementById('authorize_button').innerText = 'Refresh';
            
            // Verify that it successfully connected
            document.getElementById("outData2").innerHTML = "authorize_button pushed";

          } catch (error) {
            document.getElementById("outData2").innerHTML = error;
          }
          
          // Run desired Google Services
          //await listUpcomingEvents();
        };

        if (gapi.client.getToken() === null) {
          // Prompt the user to select a Google Account and ask for consent to share their data
          // when establishing a new session.
          tokenClient.requestAccessToken({prompt: 'consent'});

        } else {
          // Skip display of account chooser and consent dialog for an existing session.
          tokenClient.requestAccessToken({prompt: ''});
        }

      }

      // OR

      // -----------------

      // Step 3: Use the Calendar API
      async function init_way1_step3() {

        // Defines an empty local variable
        let response;

        try {

          // Requests information
          const request = {
            'calendarId': 'primary',
            'timeMin': (new Date()).toISOString(),
            'showDeleted': false,
            'singleEvents': true,
            'maxResults': 10,
            'orderBy': 'startTime',
          };

          response = await gapi.client.calendar.events.list(request);

        } catch (err) {
          document.getElementById('outData3').innerText = err.message;
          return;
        }

        const events = response.result.items;

        if (!events || events.length == 0) {
          document.getElementById('outData3').innerText = 'No events found.';
          return;
        }

        // Flatten to string to display
        const output = events.reduce(
            (str, event) => `${str}${event.summary} (${event.start.dateTime || event.start.date})\n`,
            'Events:\n');

        document.getElementById('outData3').innerText = output;
      }

      // -----------------

      // Step 4: the user needs to sign-out when they are finished
      function init_way1_step4() {
        const token = gapi.client.getToken();

        if (token !== null) {
          google.accounts.oauth2.revoke(token.access_token);
          gapi.client.setToken('');
          document.getElementById('content').innerText = '';
          document.getElementById('authorize_button').innerText = 'Authorize';
          document.getElementById('signout_button').style.visibility = 'hidden';
        }
      }

      // -----------------






SCOPES
0. See and download any calendar you can access using your Google Calendar 
.../auth/calendar.readonly
const SCOPES = 'https://www.googleapis.com/auth/calendar.readonly';

1. See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. 
.../auth/cloud-platform

2.  Insert data into Google BigQuery: https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/query




BigQuery API, v2
Scopes; https://developers.google.com/identity/protocols/oauth2/scopes
https://www.googleapis.com/auth/bigquery	View and manage your data in Google BigQuery and see the email address for your Google Account
https://www.googleapis.com/auth/bigquery.insertdata	Insert data into Google BigQuery
https://www.googleapis.com/auth/cloud-platform	See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.
https://www.googleapis.com/auth/cloud-platform.read-only	View your data across Google Cloud services and see the email address of your Google Account
https://www.googleapis.com/auth/devstorage.full_control	Manage your data and permissions in Cloud Storage and see the email address for your Google Account
https://www.googleapis.com/auth/devstorage.read_only	View your data in Google Cloud Storage
https://www.googleapis.com/auth/devstorage.read_write	Manage your data in Cloud Storage and see the email address of your Google Account



----------------------------------------------------
Things to try
----------------------------------------------------
/**
 * Creates an event in the user's default calendar.
 * @see https://developers.google.com/calendar/api/v3/reference/events/insert
 */
function createEvent(list_events) {
  const calendarId = 'primary';

  for (var i=0; i<list_events.length; i++){

    // dayOffset is every [time_period in days], so for 2 weeks (1, 14, 21 )
  }

  const start = getRelativeDate(dayOffset, 0);
  const end = getRelativeDate(1, 24);

  // event details for creating event.
  let event = {
    summary: schedule_list[i],
    location: 'TBD',
    description: 'Career transition training.',
    start: {
      dateTime: start.toISOString()
    },
    end: {
      dateTime: end.toISOString()
    },
    attendees: [{email: user_email_address}],
    // Red background. Use Calendar.Colors.get() for the full list.
    colorId: 11
  };
  try {
    // call method to insert/create new event in provided calandar
    event = Calendar.Events.insert(event, calendarId);
    console.log('Event ID: ' + event.id);
  } catch (err) {
    console.log('Failed with error %s', err.message);
  }
}


//https://developers.google.com/calendar/api/v3/reference/calendars
/**
 * Helper function to get a new Date object relative to the current date.
 * @param {number} daysOffset The number of days in the future for the new date.
 * @param {number} hour The hour of the day for the new date, in the time zone
 *     of the script.
 * @return {Date} The new date.
 */
function getRelativeDate(daysOffset, hour) {
  const date = new Date();
  date.setDate(date.getDate() + daysOffset);
  date.setHours(hour);
  date.setMinutes(0);
  date.setSeconds(0);
  date.setMilliseconds(0);
  return date;
}




async function authorize_google_access() {
  var nameService = getService();
  return 'Finished authorization! Select an automated task.'
}

function authCallback(request) {
  var nameService = getService();
  var isAuthorized = nameService.handleCallback(request);
  if (isAuthorized) {
    return HtmlService.createHtmlOutput('Success! You can close this tab.');
  } else {
    return HtmlService.createHtmlOutput('Denied. You can close this tab');
  }
}

function getService() {
  // Create a new service with the given name. The name will be used when
  // persisting the authorized token, so ensure it is unique within the
  // scope of the property store.

  var ClientID = '224463091033-okvre3a92sfrlk39inqfhjq33ma2t8dm.apps.googleusercontent.com';
  var ClientSecret = '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';

  return OAuth2.createService('gmail')

      // Set the endpoint URLs, which are the same for all Google services.
      .setAuthorizationBaseUrl('https://accounts.google.com/o/oauth2/auth')
      .setTokenUrl('https://accounts.google.com/o/oauth2/token')

      // Set the client ID and secret, from the Google Developers Console.
      .setClientId(ClientID)
      .setClientSecret(ClientSecret)

      // Set the name of the callback function in the script referenced
      // above that should be invoked to complete the OAuth flow.
      .setCallbackFunction('authCallback')

      // Set the property store where authorized tokens should be persisted.
      .setPropertyStore(PropertiesService.getUserProperties())

      // Set the scopes to request (space-separated for Google services).
      // OAuth2 Google Fit scopes: https://developers.google.com/fit/rest/v1/authorization
      // OAuth2 Gmail scopes: https://developers.google.com/gmail/api/auth/scopes
      // OAuth2 Google Calendar scopes: https://developers.google.com/calendar/api/auth
      .setScope('https://www.googleapis.com/auth/calendar https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/userinfo.profile')
    
      // Sets the login hint, which will prevent the account chooser screen
      // from being shown to users logged in with multiple accounts.
      .setParam('login_hint', Session.getActiveUser().getEmail())

      // Requests offline access.
      .setParam('access_type', 'offline')
}








----------------------------------------------------
# tables.update 
https://cloud.google.com/bigquery/docs/reference/rest/v2/tables/update
----------------------------------------------------



{
  "schema": {
    "fields": [
      {
        "name": "accesskey",
        "type": "STRING"
      },
      {
        "name": "obs5",
        "type": "STRING"
      },
      {
        "name": "obs6",
        "type": "STRING"
      },
      {
        "name": "obs7",
        "type": "STRING"
      },
      {
        "name": "obs8",
        "type": "STRING"
      },
      {
        "name": "obs9",
        "type": "STRING"
      },
      {
        "name": "obs10",
        "type": "STRING"
      },
      {
        "name": "obs11",
        "type": "STRING"
      },
      {
        "name": "obs12",
        "type": "STRING"
      },
      {
        "name": "obs13",
        "type": "STRING"
      },
      {
        "name": "obs14",
        "type": "STRING"
      },
      {
        "name": "obs15",
        "type": "STRING"
      },
      {
        "name": "obs16",
        "type": "STRING"
      },
      {
        "name": "obs17",
        "type": "STRING"
      },
      {
        "name": "obs18",
        "type": "STRING"
      },
      {
        "name": "obs19",
        "type": "STRING"
      },
      {
        "name": "obs20",
        "type": "STRING"
      },
      {
        "name": "obs21",
        "type": "STRING"
      }
    ]
  },
  "tableReference": {
    "projectId": "observations-of-data-scientist",
    "datasetId": "payAccess",
    "tableId": "payAccess_table"
  },



----------------------------------------------------
# uploads - it means to add a data file to a BigQuery table
https://cloud.google.com/bigquery/docs/reference/api-uploads
----------------------------------------------------
"load": {"sourceFormat": "{"accesskey": "hello", "obs5": "false", "obs6": "true", "obs7": "false", "obs8": "false", "obs9": "false", "obs10": "false", "obs11": "false", "obs12": "false", "obs13": "false", "obs14": "false", "obs15": "false", "obs16": "false", "obs17": "false", "obs18": "false", "obs19": "false", "obs20": "false", "obs21": "false"}"}

# OR

"load": {"sourceFormat": "{"accesskey": "hello", "obs5": "false", "obs6": "true", "obs7": "false", "obs8": "false", "obs9": "false", "obs10": "false", "obs11": "false", "obs12": "false", "obs13": "false", "obs14": "false", "obs15": "false", "obs16": "false", "obs17": "false", "obs18": "false", "obs19": "false", "obs20": "false", "obs21": "false"}"}


,
  "destinationTable": {
    "projectId": "observations-of-data-scientist",
    "datasetId": "payAccess",
    "tableId": "payAccess_table"
  }


----------------------------------------------------
# tables.insert - it means to create a new BigQuery table
POST https://bigquery.googleapis.com/bigquery/v2/projects/{projectId}/datasets/{datasetId}/tables
----------------------------------------------------
var projectId = "observations-of-data-scientist";
var datasetId = "payAccess";
var alt = "json (default)"
var fields = "INSERT_COLUMN_NAME0,INSERT_COLUMN_NAME1"
var prettyPrint = true
var quotaUser = 256;

{
  "tableReference": {
    "projectId": "observations-of-data-scientist",
    "datasetId": "payAccess",
    "tableId": "INSERT_NEW_TABLE_NAME_HERE"
  },
  "schema": {
    "fields": [
      {
        "name": "INSERT_COLUMN_NAME0",
        "type": "STRING"
      },
      {
        "name": "INSERT_COLUMN_NAME1",
        "type": "STRING"
      }
    ]
  }
}
----------------------------------------------------



----------------------------------------------------
# tables.get - it means to create a BigQuery table
POST https://bigquery.googleapis.com/bigquery/v2/projects/{projectId}/datasets/{datasetId}/tables
----------------------------------------------------
# full version example
{
  "kind": "bigquery#table",
  "etag": "6JNd7KpXD3riqQK38iHFgw==",
  "id": "observations-of-data-scientist:payAccess.payAccess_table",
  "selfLink": "https://content-bigquery.googleapis.com/bigquery/v2/projects/observations-of-data-scientist/datasets/payAccess/tables/payAccess_table",
  "tableReference": {
    "projectId": "observations-of-data-scientist",
    "datasetId": "payAccess",
    "tableId": "payAccess_table"
  },
  "schema": {
    "fields": [
      {
        "name": "accesskey",
        "type": "STRING"
      },
      {
        "name": "obs5",
        "type": "STRING"
      },
      {
        "name": "obs6",
        "type": "STRING"
      },
      {
        "name": "obs7",
        "type": "STRING"
      },
      {
        "name": "obs8",
        "type": "STRING"
      },
      {
        "name": "obs9",
        "type": "STRING"
      },
      {
        "name": "obs10",
        "type": "STRING"
      },
      {
        "name": "obs11",
        "type": "STRING"
      },
      {
        "name": "obs12",
        "type": "STRING"
      },
      {
        "name": "obs13",
        "type": "STRING"
      },
      {
        "name": "obs14",
        "type": "STRING"
      },
      {
        "name": "obs15",
        "type": "STRING"
      },
      {
        "name": "obs16",
        "type": "STRING"
      },
      {
        "name": "obs17",
        "type": "STRING"
      },
      {
        "name": "obs18",
        "type": "STRING"
      },
      {
        "name": "obs19",
        "type": "STRING"
      },
      {
        "name": "obs20",
        "type": "STRING"
      },
      {
        "name": "obs21",
        "type": "STRING"
      }
    ]
  },
  "numBytes": "128",
  "numLongTermBytes": "0",
  "numRows": "1",
  "creationTime": "1701963829793",
  "expirationTime": "1707147829793",
  "lastModifiedTime": "1701963904289",
  "type": "TABLE",
  "location": "europe-west9",
  "numTimeTravelPhysicalBytes": "0",
  "numTotalLogicalBytes": "128",
  "numActiveLogicalBytes": "128",
  "numLongTermLogicalBytes": "0",
  "numTotalPhysicalBytes": "1547",
  "numActivePhysicalBytes": "1547",
  "numLongTermPhysicalBytes": "0"
}


----------------------------------------------------
# tables.get - it means to create a BigQuery table
POST https://bigquery.googleapis.com/bigquery/v2/projects/{projectId}/datasets/{datasetId}/tables
----------------------------------------------------



----------------------------------------------------

----------------------------------------------------
The difference between `gapi.auth2.getAuthInstance().signIn()` and `google.accounts.oauth2.initTokenClient` is that they are part of different client libraries and are used for different purposes.

`gapi.auth2.getAuthInstance().signIn()` is a method from the `gapi.auth2` client library which is used to initiate the Google Sign-In process. It allows users to authenticate and sign in using their Google credentials. This method is typically used for signing in to Google services or applications that require user authentication.

On the other hand, `google.accounts.oauth2.initTokenClient` is a method from the `google.accounts.oauth2` client library which is used to initialize an OAuth 2.0 client for making API requests. This method is typically used for server-to-server communication, where an application needs to obtain access tokens to authenticate and authorize API requests on behalf of users or itself.

In summary, `gapi.auth2.getAuthInstance().signIn()` is used for user authentication and sign-in, while `google.accounts.oauth2.initTokenClient` is used for initializing an OAuth 2.0 client to make API requests.



----------------------------------------------------
client-side JavaScript application
----------------------------------------------------
To perform OAuth2 authentication for requests made with the gapi.client library, you can follow these steps:

1. Register your application with the Google Cloud Console and obtain your client ID and client secret. Make sure you have the necessary OAuth2 scopes configured for the requested API.

2. Include the Google API client library in your application. You can include the library by adding the following script tag to your HTML file:
```html
<script src="https://apis.google.com/js/api.js"></script>
```

3. Initialize the client library and specify your client ID and the API you want to access. For example:
```javascript
gapi.load('client', () => {
  gapi.client.init({
    clientId: 'YOUR_CLIENT_ID',
    scope: 'YOUR_SCOPES',
  }).then(() => {
    // Perform API requests
  });
});
```
Replace `'YOUR_CLIENT_ID'` with your actual client ID, and `'YOUR_SCOPES'` with the OAuth2 scopes required by the API you want to access.

4. Before making any requests, you need to authorize the user and obtain an access token. You can do this using the `gapi.auth2` object:
```javascript
gapi.auth2.getAuthInstance().signIn().then(() => {
  // User is now signed in and you have an access token
  // Perform API requests
});
```
This will open a consent screen for the user to authorize your application and obtain their consent to access their data.

5. Once the user is authenticated and authorized, you can make API requests using the `gapi.client` object. For example, to make a request to the Google Drive API:
```javascript
gapi.client.drive.files.list().then((response) => {
  const files = response.result.files;
  console.log('Files:', files);
}, (error) => {
  console.error('Error:', error);
});
```

Remember to handle any errors that may occur during the authentication or API request process.

Please note that this example assumes you are working with a client-side JavaScript application. If you are working with a server-side application, the process may be slightly different and involve using server-specific libraries or frameworks.


----------------------------------------------------
Error 400: redirect_uri_mismatch usually occurs when the redirect URI specified in the request doesn't match the redirect URI listed in the OAuth client configuration on the Google Cloud Console.

To fix this issue, you can follow these steps:

1. Go to the Google Cloud Console (https://console.cloud.google.com/).
2. Navigate to your project and select the "OAuth consent screen" tab from the left menu.
3. Ensure that the "Authorized redirect URIs" field contains the correct redirect URI that you are using in your application.
4. If the redirect URI is missing or incorrect, add or update it.
5. Save the changes and try your request again.

By ensuring that the redirect URI in your request matches the redirect URI configured in the OAuth client settings, you should be able to resolve the redirect_uri_mismatch error.

----------------------------------------------------


----------------------------------------------------
OAuth consent screen
----------------------------------------------------
User type: External 

App name: streaming_service0
User support email: j622amilah@gmail.com

App domain
Application home page: 

If you have a google apps script attached to a spreadsheet, put the spreadsheet URL:
https://docs.google.com/spreadsheets/d/1UV38bXGj5l04qrocKH7-m65exa3P01MoJBbXHrHqWIw/edit#gid=0

If you have a google apps script ONLY, put the google apps script deployment URL: 
https://script.google.com/macros/s/AKfycbyf7iedOyEn2hTk3-rlqJ9FCX8DHXkw1OaROr0UZ8g/dev
https://script.google.com/macros/s/AKfycbxlPnt0dpuOhLOcydEJ0GdWSPD2BFf3W3BvMTLY6pJP/dev


Application privacy policy link: https://github.com/j622amilah/userservicesite/blob/main/README.md

Application terms of service link: https://github.com/j622amilah/userservicesite/blob/main/README.md

Authorized domains
When a domain is used on the consent screen or in an OAuth client’s configuration, it must be pre-registered here. If your app needs to go through verification, please go to the Google Search Console to check if your domains are authorized. Learn more about the authorized domain limit. 

Authorized domain 1
j622amilah.github.io

Authorized domain 2
www.googleapis.com

Authorized domain 3
github.com

Authorized domain 4
google.com

If you have a google apps script ONLY, put google.com.

Developer contact information
Email addresses: j622amilah@gmail.com

----------------------------------------------------

Scopes express the permissions you request users to authorize for your app and allow your project to access specific types of private user data from their Google Account. https://developers.google.com/identity/protocols/oauth2/scopes

Your non-sensitive scopes
API, Scope, User-facing description
No rows to display

Your sensitive scopes
Sensitive scopes are scopes that request access to private user data.
API, Scope, User-facing description
No rows to display
	
Your restricted scopes
Restricted scopes are scopes that request access to highly sensitive user data.
API, Scope, User-facing description
No rows to display

----------------------------------------------------

Test users

While publishing status is set to "Testing", only test users are able to access the app. Allowed user cap prior to app verification is 100, and is counted over the entire lifetime of the app. https://support.google.com/cloud/answer/7454865

User information: j622amilah@gmail.com 	

----------------------------------------------------


----------------------------------------------------
OAuth Credentials
----------------------------------------------------
Name: observations_webapp
The name of your OAuth 2.0 client. This name is only used to identify the client in the console and will not be shown to end users. 

The domains of the URIs you add below will be automatically added to your OAuth consent screen as authorized domains. 

OAuth consent screen URL: https://console.cloud.google.com/apis/credentials/consent?project=observations-of-data-scientist
Authorized domains: https://support.google.com/cloud/answer/6158849#authorized-domains&zippy=%2Cauthorized-domains

----------------------------------------------------

Authorized JavaScript origins
The HTTP origins that host your web application. This value can't contain wildcards or paths. If you use a port other than 80, you must specify it. For example: https://example.com:8080 

For use with requests from a browser

URIs 1: https://script.google.com

----------------------------------------------------

Authorized redirect URIs
Users will be redirected to this path after they have authenticated with Google. The path will be appended with the authorization code for access, and must have a protocol. It can’t contain URL fragments, relative paths, or wildcards, and can’t be a public IP address.

For use with requests from a web server 

URIs 1: https://script.google.com/macros/s/AKfycbyf7iedOyEn2hTk3-rlqJ9FCX8DHXkw1OaROr0UZ8g/dev

----------------------------------------------------

Note: It may take 5 minutes to a few hours for settings to take effect 

----------------------------------------------------

To solve the "redirect_uri_mismatch" error, you need to ensure that the redirect URI specified in your Google Cloud Platform project matches the redirect URI in your code.

Here are some steps to follow:

1. Go to the Google Cloud Platform (console.cloud.google.com).
2. Open your project and navigate to the OAuth consent screen.
3. Make sure that the authorized JavaScript origins and redirect URIs match the ones specified in your code.
4. If they don't match, either update your code to use the correct values or update the authorized origins and redirect URIs in your project.
5. Save your changes.
6. Retry the `tokenClient.requestAccessToken()` function with the updated redirect URI.

If the issue persists, make sure you have completed the necessary configuration steps for OAuth in your Google Cloud Platform project and that the client ID and client secret are correctly configured.

Please note that the specific steps may vary depending on the Google Cloud Platform project setup and the programming language you are using.

----------------------------------------------------











----------------------------------------------------
To try
----------------------------------------------------

- Clean up code
	- do not put form call in an async

- run it, look in browser at localStorage
	- cookieConsent under local storage for https://script.google.com


- call the OAuth2 server with POST

----------------------------------------------------


to do 

- need to add onload - added
	- on sure it works
	- says 'We're sorry, a server error occurred. Please wait a bit and try again.'

- need to add the part that knows which row to insert the output  
	- not quite right : need to feed dict value to two other functions, fixed it by asking user to insert the spreadsheet row they want and reading the value
	- works


----------------------------------------------------

- There was doubt about localStorage being able to store browser variables without deployment, but it is confirmed that without deployment the browser CAN NOT be accessed so Spreadsheet variables can not be stored in localStorage

- Re-organized server to the past version so that automated responses are put on the server spreadsheet



to do 
- Need to set up javascript spreadsheet for client-users to manipulate and copy-paste into their Google Spreadsheets
	- The client Google Spreadsheet can open a popup window to the Server where they query the robot

- need to figure out how to calculate the score
	- DONE

----------------------------------------------------

<!-- &nbsp;&nbsp;&nbsp;<button id="close_window" onclick="window.location.close();">Close window</button>&nbsp;&nbsp;&nbsp;<button id="reload_window" onclick="window.location.assign('https://script.google.com/macros/s/AKfycbxFNzlG5-P1tn0_2UhfZ0iZtOFJMLIpLinP71PVFf5b/dev');">Reload window</button> -->

// Wanted to see if I could just run it without having to push the button - it would be better
// window.addEventListener("load", (event) => { fill_a_row(); });

----------------------------------------------------

To do

- change database code for getting longer token - still using the OAuth-clientAPI linked to my account
	- with this the server works running off my account: I need to change the token every 12-24 hours 
	- someone says that it will ask users to sign in...

- then change the OAuth-API to server: 

- then start doing each of the observation buttons (6 - 21, plus the one main exercise page/button (How to start taking responsibility for your life)) 


Minor
- main exercise works! : https://script.google.com/macros/s/AKfycby1oGsT2jjor72i9QglJohTgiB20oM7G4ZYN72UD7M8ajBxBmLzmvDNbIdo-Hoz-Zn1-w/exec
	- Need to make a main exercise page/button
	- Need to put the client .csv file in the userservice folder OR specified_GCP_project storage - so users can just download the file  (OR figure out how they can open in their google drive
	  WITHOUT me sharing it with them)



- before launch: transfer the userservice site to CodeSolutions2 - then website will be with the organization name and have nothing to do with my personal account

----------------------------------------------------


To make a deployed Google Apps Script receive a POST request with a parameter named "username," you can follow these steps:

1. Open your Google Apps Script project in the Apps Script editor.
2. Write a function to handle the POST request and retrieve the "username" parameter. Here's an example:

```javascript
function doPost(e) {
  var params = e.parameter;
  var username = params.username;
  
  // Do something with the username
  Logger.log('Received username: ' + username);
  
  // Return a response
  var response = ContentService.createTextOutput('POST request received');
  return response;
}
```

3. Save your project.
4. Deploy your Google Apps Script as a web app:
   - Click on the "Deploy" menu.
   - Choose "New deployment."
   - Configure the deployment settings, such as the version and access permissions.
   - Under "Execute the app as," choose your own Google account or user accessing the web app.
   - Under "Who has access to the app," select the appropriate access level.
   - Click "Deploy" to generate a deployment URL.
  
5. Once deployed, you can send a POST request to the deployment URL with the "username" parameter set. Here's an example using cURL:

```bash
curl -X POST -d 'username=johndoe' <deployment_url>
```

6. Check the Apps Script execution logs to see the log output generated by your function.

That's it! Your deployed Google Apps Script is now ready to receive a POST request with a "username" parameter. Remember to secure your application by implementing appropriate authentication and authorization mechanisms if necessary.


----------------------------------------------------

To print the received POST request parameter to a Google Sheet using Google Apps Script, you can follow these steps:

1. Open your Google Sheet and go to the Script Editor by clicking on "Tools" > "Script editor" in the menu.

2. In the Script Editor, write the following code:

```javascript
function doPost(e) {
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  var parameterValue = e.parameter.yourParameterName;
  sheet.appendRow([parameterValue]);

  return ContentService.createTextOutput('Parameter value added to the sheet.');
}
```

Replace "yourParameterName" with the actual name of the parameter you expect to receive in the POST request.

3. Save the script by clicking on "File" > "Save".

4. Deploy the script as a web app by clicking on "Publish" > "Deploy as web app" in the menu.

5. In the deployment settings, make sure to select the following:

   - Project version: "New"
   - Execute the app as: Your Google account
   - Who has access to the app: Anyone, even anonymous

6. Click on "Deploy" and you will be provided with a URL for your web app.

7. Use the provided URL as the endpoint for your POST request, passing the parameter in the request payload.

When a POST request is made to the deployed web app URL with the parameter, the parameter value will be appended as a new row in the active sheet of your Google Sheet.

Note: Make sure you have the necessary permissions to access and modify the Google Sheet.

----------------------------------------------------

In Google Apps Script, the `doPost` function is automatically called when a POST request is made to your deployed endpoint. The `e` parameter in the `doPost(e)` function represents the event object that contains the request details.

By default, the `e` parameter has the following properties:
- `parameter`: An object containing the POST request parameters.
- `parameters`: An object containing both the GET and POST request parameters.
- `contextPath`: The context path of the script URL.
- `contentLength`: The length of the request content.
- `queryString`: The query string part of the URL.
- `postData`: A `Blob` object containing the request data.

To access the POST request parameter, you can use `e.parameter` object. For example, if your POST request parameter is named `myParam`, you can retrieve it as `e.parameter.myParam`.

Here's an example code for handling a POST request and accessing the parameter using Google Apps Script:

```javascript
function doPost(e) {
  var myParam = e.parameter.myParam;
  
  // Do something with the parameter value
  
  // Return a response (optional)
  return ContentService.createTextOutput("Request received successfully");
}
```

Make sure that your deployed endpoint URL is correctly formatted, as it should include the project's Google Apps Script "exec" ID. The endpoint URL would look like this: `https://script.google.com/macros/s/{EXEC_ID}/exec`.

Remember to test your endpoint using a tool like Postman or by making a POST request from your application to the deployed endpoint.

----------------------------------------------------



google.script.history provides methods to allow dynamic response to browser history changes. This includes: pushing states (simple Objects you can define) onto the browser history, replacing the top state in the history stack, and setting a listener callback function to respond to history changes.

google.script.url provides the means to retrieve the current page's URL parameters and URL fragment, if they are present.


--------------------------------------------------------------------------------------------------------

I did GET from client - the client page changed to the server page - and the url was the following on the client browser
https://script.google.com/macros/s/AKfycbylXxyKOntU1cjG3Aqu79Ggk0AQ__DjMP8q8T1IZz2lR0pOjmXSTIzfH6V6pPcO4qwv/exec?username=username&submit_button=submit_button

https://script.google.com/macros/s/AKfycbylXxyKOntU1cjG3Aqu79Ggk0AQ__DjMP8q8T1IZz2lR0pOjmXSTIzfH6V6pPcO4qwv/exec?username=jjjjjjj

function doGet(e) {
  
  // The endpoint returns the HTML page if a GET request is made to the url
  //return HtmlService.createHtmlOutputFromFile('index');

  // The endpoint returns the url if a GET request is made to the url
  // var url = e.parameter.url;
  return ContentService.createTextOutput(e.parameter.username);
}

----------------------------------------------------

I did POST from client - the client page changed to the message that I desginated from the server - no data from client is received on the server

function doPost(e) {
  // https://developers.google.com/apps-script/guides/web

  // Declaring parameters that the endpoint should receive as data in the POST request
  var username = e.parameter.username;

  // -----------------------------
  // Q: how do I get the parameter that was sent to me?
  // -----------------------------
  // Way 0
  console.log(username);
  Logger.log('Received username: ' + username);

  // -----------------------------

  // Way 1
  // Obtain the value that was sent from the client
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = ss.getSheetByName("Sheet1");

  var numRows = sheet.getLastRow() + 1;
  var cell_letter = "C"
  var str_val = cell_letter.concat(numRows.toString(), ":", cell_letter, numRows.toString())

  var range = sheet.getRange(str_val);
  range.setValues([ [username] ]);

  // -----------------------------

  // Way 2
  PropertiesService.getScriptProperties().setProperty('username', 'test');
  // Nothing is stored after a post request from a client - this function does not run on the server

  // -----------------------------

  // Return a response to user who made the post request
  var text_sent_2_client_if_successful_POSTrequest = "POST request received";
  var response = ContentService.createTextOutput(text_sent_2_client_if_successful_POSTrequest);
  
  var json_response = response.setMimeType(ContentService.MimeType.JSON);
  var text_response = response.setMimeType(ContentService.MimeType.PLAIN_TEXT);
  
  // Q: Do I need to call doPost? no I do not need to call it. In Google Apps Script, the `doPost` function is automatically triggered when a POST request is made to the endpoint. You can access the POST request parameters directly within the `doPost` function using the `e` parameter.

  return response;
}

----------------------------------------------------

----------------------------------------------------

----------------------------------------------------

----------------------------------------------------

----------------------------------------------------

----------------------------------------------------

----------------------------------------------------

Quantifying incremental points per action maybe more realistic than quantifying an absolute error to acheiving a goal, because one may never accomplish the goal. However, understanding that each incremental action is or is not effective could increase one's chance to obtain closeness to the goal.












target

    Where to display the linked URL, as the name for a browsing context (a tab, window, or <iframe>). The following keywords have special meanings for where to load the URL:

        _self: the current browsing context. (Default) - it asks your permission to use the site

        _blank: usually a new tab, but users can configure browsers to open a new window instead. - it opens a new tab

        _parent: the parent browsing context of the current one. If no parent, behaves as _self.

        _top: the topmost browsing context (the "highest" context that's an ancestor of the current one). If no ancestors, behaves as _self.
                - it uses the same window


---------------------------------





// callback
        // await step0_call_url_in_window_way1().then(function () {var returnedurl = window.location.href; document.getElementById("outData0").innerHTML = returnedurl;})

        // promise, then callback
        // await step0_call_url_in_window_way1().then(res => res).then(res => {setTimeout( function() { var returnedurl = window.location.href; document.getElementById("outData0").innerHTML = returnedurl; }, 3000)})
        
        // It waits to send the form
        // await step0_call_url_in_window_way1()
        // setTimeout( function() { var returnedurl = window.location.href; document.getElementById("outData0").innerHTML = returnedurl; }, 3000)


---------------------------------
// Different ways to make function calls in sequence

// return a promise of function_name, and then return a callback of the promise - you always have an output from function_name (like undefined)
// await function_name().then(response => response.json).then(response => { output res or other commands})

// return a callback of function_name, and do a sequential function call
// await function_name().then(response => (do something with response)).then(function() {do other commands without response})

// return the output of function_name
// await function_name().then(function(response) {output response or other commands})

// call function_name and then run some other commands sequentially
// await function_name().then(function() {other commands})

// await function_name().then(() => {other commands})
---------------------------------








---------------------------------
Version 0
---------------------------------
<!DOCTYPE html>
<html>
  <head>
    <base target="_top">
  </head>
  <body>
    
    <!-- HTML -->

    <!-- <button id="step0_call_url_in_window_way0" onclick="step0_call_url_in_window_way0()" style='text-align: left;'>step0_call_url_in_window_way0</button> -->

    <!-- <button id="step0_call_url_in_window_way1" onclick="step0_call_url_in_window_way1()" style='text-align: left;'>step0_call_url_in_window_way1</button> -->

    <button id="sequential_events" onclick="sequential_events()" style='text-align: left;'>sequential_events</button>

    <br><br>

    <textarea id="outData0" style='text-align: left;' rows="4" cols="50" placeholder="outData0"></textarea>

    <br><br>

    <textarea id="outData1" style='text-align: left;' rows="4" cols="50" placeholder="outData1"></textarea>

    <br><br>

    <button id="get_url_on_newpage" onclick="get_url_on_newpage()" style='text-align: left;'>get_url_on_newpage</button>

    <br><br>

    <textarea id="outData2" style='text-align: left;' rows="4" cols="50" placeholder="outData2"></textarea>

    <br><br>

    <button id="fetch_post2bigquery" onclick="fetch_post2bigquery()" style='text-align: left;'>fetch_post2bigquery</button>

    <br><br>

    <textarea id="outData3" style='text-align: left;' rows="4" cols="50" placeholder="outData3"></textarea>

    <br><br>


    <!-- JAVASCRIPT -->
    <script>
      
      // -------------------
      // Start monitoring events as soon as script starts
      // -------------------
      // it seems like it is always running, so I can just start it running at the start of script
      // window.addEventListener("locationchange", function(){ document.getElementById("outData1").innerHTML = window.location.href; });

      // -------------------

      var SCOPES = 'https://www.googleapis.com/auth/bigquery https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud-platform.read-only';

      var CLIENT_ID = '982455389157-9o2j34k1qff8cc1apqbec9so842istai.apps.googleusercontent.com';

      var REDIRECT_URI = 'https://script.google.com/macros/s/AKfycbxlPnt0dpuOhLOcydEJ0GdWSPD2BFf3W3BvMTLY6pJP/dev';
      // OR
      // var REDIRECT_URI = 'https://script.google.com';

      var CLIENT_SECRET = "";  // for trading in the authorization_code for the access_token

      // -------------------


      function get_url_on_newpage(){
        var fragmentString = location.hash.substring(1);
        document.getElementById("outData0").innerHTML = fragmentString;

        // Parse query string to see if page request is coming from OAuth 2.0 server.
        var params = {};
        var regex = /([^&=]+)=([^&]*)/g, m;
        while (m = regex.exec(fragmentString)) {
          params[decodeURIComponent(m[1])] = decodeURIComponent(m[2]);
        }

        if (Object.keys(params).length > 0) {
          localStorage.setItem('oauth2-test-params', JSON.stringify(params) );
          if (params['state'] && params['state'] == 'try_sample_request') {
            
            // Get access_token from page
            var params = JSON.parse(localStorage.getItem('oauth2-test-params'));
            var ACCESS_TOKEN = params['access_token'];

            // Call a method
            // trySampleRequest();
            fetch_post2bigquery();
          }
        }
      }

      // -------------------

      async function total_process(){

        // callback
        // await step0_call_url_in_window_way1().then(function () {var returnedurl = window.location.href; document.getElementById("outData0").innerHTML = returnedurl;})

        // promise, then callback
        // await step0_call_url_in_window_way1().then(res => res).then(res => {setTimeout( function() { var returnedurl = window.location.href; document.getElementById("outData0").innerHTML = returnedurl; }, 3000)})
        
        // It waits to send the form
        // await step0_call_url_in_window_way1()
        // setTimeout( function() { var returnedurl = window.location.href; document.getElementById("outData0").innerHTML = returnedurl; }, 3000)

        await step0_call_url_in_window_way1();
      }

      // -------------------

      // Different ways to make function calls in sequence

      // return a promise of function_name, and then return a callback of the promise - you always have an output from function_name (like undefined)
      // await function_name().then(response => response.json).then(response => { output res or other commands})

      // return a callback of function_name, and do a sequential function call
      // await function_name().then(response => (do something with response)).then(function() {do other commands without response})

      // return the output of function_name
      // await function_name().then(function(response) {output response or other commands})

      // call function_name and then run some other commands sequentially
      // await function_name().then(function() {other commands})

      // await function_name().then(() => {other commands})

      async function sequential_events(){

        try {
          // await step0_call_url_in_window_way1();

          // DOES NOT WORK: It returns the callback before page/url changes
          await total_process().then(() => { 
            
            // {}
            google.script.url.getLocation(function(location) {document.getElementById("outData0").innerHTML = JSON.stringify(location.parameters, null, 2)})
            // OR
            // google.script.run.withSuccessHandler(function(result){var url = e.parameter.url; document.getElementById("outData0").innerHTML = url;}).get_url();
            // OR
            var winRef = window.location.href; 
            // The steps are:
          // [0] the initial url is the deployment URL, [1] the URL changes to something else (https://n-r2pbtrsqsf2gx46eesq7qdxgjigesuvhrdh5waq-0lu-script.googleusercontent.com/userCodeAppPanel)
           // document.getElementById("outData0").innerHTML = winRef; 
          // [2] it contacts OAuth2 with GET
          // [3] OAuth2 changes the URL to the redirect_uri with the authorization_code  
          // so calling it here means that I am likely to start monitoring at or after step [1]

          // if the evenlister is always running after it is called like a trigger function running for infinity, shouldn't it catch all paage changes regardless of timing

          // start monitoring for a page change where the url contains #
          // window.addEventListener("hashchange", function(){ document.getElementById("outData1").innerHTML = window.location.href; });

          // Maybe slowing down the execution of page events makes it run
          // wait 5000 ms before starting to monitor a url change
          setTimeout( function() { document.getElementById("outData1").innerHTML = 'here'; }, 500);

          return winRef;
          })
          .then(function(winRef) {
            for (var i=0; i < 500; i++){
              // https://developers.google.com/apps-script/guides/html/reference/url#locationObject
              // google.script.url.getLocation(function(location) {document.getElementById("outData1").innerHTML = JSON.stringify(location.parameters, null, 2)})
              // OR
              // google.script.run.withSuccessHandler(function(result){var url = e.parameter.url;document.getElementById("outData1").innerHTML = url;}).get_url();
              // OR
              document.getElementById("outData1").innerHTML = window.location.href;
            }
            // OR
            // window.addEventListener("hashchange", function(){ })
          })

          // The final url is 
          // https://script.google.com/macros/s/AKfycbxlPnt0dpuOhLOcydEJ0GdWSPD2BFf3W3BvMTLY6pJP/dev#state=pass-through&access_token=ya29.a0AfB_byCgmk7gR6Brji_3HFOwLpEGDGgKmQG_kdgT-RkYgYw2mCj2ysLgf5bWBt0tiZuryzSE7qPSJ75iN9w66sA2BkMj6qdY_TWVjty2f3zc8b4bOlac0ffehvnxYzxiS_acySbCNV8rMXGhjUsZWjeBEvayoPU-bQaCgYKAXwSARASFQHGX2MiOnJ28zZx_7iH7fKPfb8Ijg0169&token_type=Bearer&expires_in=3599&scope=https://www.googleapis.com/auth/bigquery

        } catch (error) {
          document.getElementById("outData1").innerHTML = error;
        }
        

      }




      function step0_call_url_in_window_way1(){

        // https://developers.google.com/identity/protocols/oauth2/javascript-implicit-flow

        // Google's OAuth 2.0 endpoint for requesting an access token
        var oauth2Endpoint = 'https://accounts.google.com/o/oauth2/v2/auth';

        // var returnedurl = window.location.href; 
        // document.getElementById("outData0").innerHTML = returnedurl;
        // https://n-r2pbtrsqsf2gx46eesq7qdxgjigesuvhrdh5waq-0lu-script.googleusercontent.com/userCodeAppPanel

        // Create <form> element to submit parameters to OAuth 2.0 endpoint.
        var form = document.createElement('form');
        form.setAttribute('method', 'GET'); // Send as a GET request.
        form.setAttribute('action', oauth2Endpoint);

        // Parameters to pass to OAuth 2.0 endpoint.
        var params = {'client_id': CLIENT_ID, 'response_type': 'token', 'redirect_uri': REDIRECT_URI, 'scope': SCOPES, 'include_granted_scopes': 'true', 'state': 'pass-through value'};

        // Add form parameters as hidden input values.
        for (var p in params) {
          var input = document.createElement('input');

          // input.setAttribute('type', 'visible');
          // input.setAttribute('name', p);
          // input.setAttribute('value', params[p]);
          // OR
          input.innerHTML = '<input type="visible" name='+p+' value='+params[p]+'>';

          form.appendChild(input);
        }

        // Add form to page and submit it to open the OAuth 2.0 endpoint.
        document.body.appendChild(form);
        form.submit();

      }

      // -------------------

      // Fetch POST to BigQuery table
      async function fetch_post2bigquery(){

        // var payAccess_key = document.getElementById("payAccess_key").value;
        // document.getElementById("outData1").innerHTML = payAccess_key;
        var payAccess_key = "username3";

        var projectId = "observations-of-data-scientist";
        // ar datasetId = "payAccess";
        // var tableId = "payAccess_table";

        // desired columns wanted from the table
        // var selectedFields = "accesskey,paid";
        // var view = "BASIC"; 
        // var alt = "json (default)";
        // var prettyPrint = true;
        // var quotaUser = 256;

        var location = "europe-west9";

        //var url = `https://bigquery.googleapis.com/bigquery/v2/projects/${projectId}/queries`;
        var url = "https://bigquery.googleapis.com/bigquery/v2/projects/"+projectId+"/queries";

        // -----------------------------------
        
        var headers = {"Content-Type": "application/json", "Authorization": 'Bearer ' + ACCESS_TOKEN};

        // var data = {"query": "INSERT INTO $dataset_name.$TABLE_NAME (accesskey, paid) VALUES('user2', true);", 'location': location, "useLegacySql": false};
        var data = {
                  "query": "INSERT INTO $dataset_name.$TABLE_NAME (accesskey, paid) VALUES("+payAccess_key+", true);", 
                  "location": location, 
                  "useLegacySql": false
                  };

        var options = {method : 'post', headers: headers, body : JSON.stringify(data)};

        // -----------------------------------

        try {
          // Output: Print text part to a text area
          await fetch(url, options).then(res => res.json()).then(res => {document.getElementById("outData2").innerHTML = JSON.parse(JSON.stringify(res));})

        } catch (error) {
          document.getElementById("outData2").innerHTML = error;
        }

      }




      </script>


  </body>
</html>






---------------------------------
Version 1
---------------------------------
      // ----------------------------------------
      // STEP 3: Fetch POST to BigQuery table
      // ----------------------------------------
      
      // BigQuery
      const DISCOVERY_DOC = "https://bigquery.googleapis.com/discovery/v1/apis/bigquery/v2/rest";

      // ----------------------------------------

      function gapi_bigquery() {
        // WORK with https://apis.google.com/js/api.js
        gapi.load('client', fetch_post2bigquery_way1);
      }


      async function fetch_post2bigquery_way1(){
        await gapi.client.init({
                  apiKey: ACCESS_TOKEN, 
                  discoveryDocs: [DISCOVERY_DOC], 
                  client_id: CLIENT_ID, 
                  fetch_basic_profile: true,
                  scope: SCOPES // it does not output, the code breaks. So apparently it means that it does something
                  // test: true,  // it outputs, but test is not a parameter. I could type anything and think that it is working because it does not give an error message.
                  }).then(function() {

                    
                    // Calendar
                    // Not Found
                    // return gapi.client.calendar.events.list({'calendarId': 'primary', 'showDeleted': true, 'singleEvents': true, 'maxResults': 10});})
                    

                    // OR
                    
                    // Bigquery
                    // API keys are not supported by this API. Expected OAuth2 access token or other authentication credentials that assert a principal. See https://cloud.google.com/docs/authentication
                    return gapi.client.bigquery.jobs.query({
                        "projectId": "observations-of-data-scientist", 
                        "prettyPrint": true, 
                        "quotaUser": 256, 
                        "query": "INSERT INTO payAccess.payAccess_table (accesskey, paid) VALUES('username5', true)", "location": "europe-west9", 
                        "useLegacySql": false});})
                    
            
                    .then(function(response) {document.getElementById("outData3").innerHTML = response;}
                    );

        }


------------------------------------------------------------------------------------------------------
index_oauth2_way2
------------------------------------------------------------------------------------------------------
<!DOCTYPE html>
<html>
  <head></head>
  <body>
    <!-- HTML -->
    <!-- Redirect page after PayPal payment is received -->
    <h1 style='text-align: center; margin-bottom: -35px;'>Data Science Observations in a Chaotic World</h1>
    <br><br>
    <p style='text-align: center; margin-bottom: -35px;'>Congratulations on purchasing the remaining Observations 5-21! You are on your way to having a more observant and responsible career and life! 🎉</p>

    <br><br>

    Please create a non-personalized accesskey/username, such that the webapp knows that you paid. The webapp will store your non-personalized accesskey in a Google Cloud BigQuery database. When you enter your non-personalized accesskey in the webapp, the webapp will search the BigQuery database and give you permission to use the webapp. No personal payment information is stored.
    
    <br><br>

    <label style="text-align: center;">Create a non-personalized accesskey to unlock Observations 5-21:</label><input id="payAccess_key" type="text" value="" placeholder="Create a unique non-personalized accesskey" rows="1" cols="50" style='text-align: center; width: 400px;'>
    
    <br><br>

    <!-- call google.accounts.oauth2.initTokenClient FIRST, and then gapi -->
    <button id="oauth2_gapi" onclick="oauth2_gapi()" style='text-align: left;'>oauth2_gapi</button>
    <br><br>
    <textarea id="outData0" style='text-align: left;' rows="4" cols="50" placeholder="outData0"></textarea>

    <br><br>

    <!-- call gapi FIRST, and then google.accounts.oauth2.initTokenClient -->
    <button id="gapi_oauth2" onclick="gapi_oauth2()" style='text-align: left;'>gapi_oauth2</button>
    <br><br>
    <textarea id="outData1" style='text-align: left;' rows="4" cols="50" placeholder="outData1"></textarea>

    <br><br>

    <button id="gapi_oauth2_buttonhandle" onclick="gapi_oauth2_buttonhandle()" style='text-align: left;'>gapi_oauth2_buttonhandle</button>
    <br><br>


    <!-- --------------------------------------------------- -->
    <!-- JAVASCRIPT -->
    <!-- --------------------------------------------------- -->
    <!-- call google.accounts.oauth2.initTokenClient FIRST, and then gapi -->

    <!-- Automatically authenicates with OAuth2 -->
    <!-- <script async defer src="https://accounts.google.com/gsi/client" onload="oauth2_gapi()"></script> -->

    <!-- Automatically authenicates with the GCP_PROJECT_API_KEY -->
    <!-- <script async defer src="https://apis.google.com/js/api.js"></script> -->

    <!-- --------------------------------------------------- -->

    <!-- call gapi.auth2 FIRST, then gapi.client -->
    
    <!-- For gapi.auth2 library -->
    <!-- <script src="https://apis.google.com/js/platform.js?onload=oauth2_gapi" async defer></script>  -->
    <!-- <script async defer src="https://apis.google.com/js/platform.js" onload="oauth2_gapi()"></script>-->

    <!-- For gapi.client library -->
    <!-- <script async defer src="https://apis.google.com/js/api.js" onload="oauth2_gapi()"></script> -->
    
    <!-- --------------------------------------------------- -->

    <!-- call gapi FIRST, and then OAuth2-->

    <!-- Automatically authenicates with the GCP_PROJECT_API_KEY -->
    <script async defer src="https://apis.google.com/js/api.js" onload="gapi_oauth2()"></script>
    
    <!-- Automatically authenicates with OAuth2 -->
    <!-- <script async defer src="https://accounts.google.com/gsi/client"></script> -->

    <!-- --------------------------------------------------- -->
    
    <script>
      
      // -----------------------------------

      // If one wants to use an API that has PROJECT_API_KEY security only, one needs to use gapi.auth2.init.
      
      // If one wants to use an API that has OAuth2 security, one needs to use google.accounts.oauth2.initTokenClient

      // -----------------------------------

      // Google Calendar
      // const DISCOVERY_DOC = "https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest";

      // const SCOPES = "https://www.googleapis.com/auth/calendar.readonly";

      // https://developers.google.com/calendar/api/v3/reference/events/list
      // GET https://www.googleapis.com/calendar/v3/calendars/calendarId/events

      // -----------------------------------

      // BigQuery
      const DISCOVERY_DOC = "https://bigquery.googleapis.com/discovery/v1/apis/bigquery/v2/rest";

      const SCOPES = "https://www.googleapis.com/auth/bigquery https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud-platform.read-only";
      
      // POST https://bigquery.googleapis.com/bigquery/v2/projects/"+projectId+"/queries
      
      // -----------------------------------
      
      // Remove everyday ***
      const API_KEY = "";
      const CLIENT_ID = "";

      // -----------------------------------

      const REDIRECT_URI = "http://script.google.com";

      // https://accounts.google.com/o/oauth2/auth?client_id={client_id}&response_type=token&redirect_uri={redirect_uri}&scope={scope}
      

      // https://accounts.google.com/o/oauth2/auth?client_id=982455389157-9o2j34k1qff8cc1apqbec9so842istai.apps.googleusercontent.com&response_type=token&redirect_uri=https://script.google.com&scope=https://www.googleapis.com/auth/bigquery https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud-platform.read-only

      // -----------------------------------


      // <!-- call google.accounts.oauth2.initTokenClient FIRST, and then gapi -->
      function oauth2_gapi() {

        // ------------------
        
        // Try 0: Using a token
        
        // https://developers.google.com/identity/oauth2/web/reference/js-reference
        // [object Object]

        // client_id =Required. The client ID for your application. You can find this value in the API Console.

        // callback =	Required. The JavaScript function that handles returned token response.
        
        // scope = Required. A space-delimited list of scopes that identify the resources that your application could access on the user's behalf. These values inform the consent screen that Google displays to the user.

        // Try 1: call gapi inside google.accounts.oauth2.initTokenClient, outputting
        // DOES NOT WORK : no output
        /*
        var client = google.accounts.oauth2.initTokenClient({
          client_id: CLIENT_ID, 
          scope: SCOPES, 
          callback: (resp) => {
            document.getElementById("outData0").innerHTML = resp;
            if (resp && resp.access_token) {
              gapi.client.setApiKey(API_KEY);
              gapi.client.load('madeup_name', 'v1', call_library);
            }
          }
        });
        */

        // ------------------

        // Prints
        // document.getElementById("outData0").innerHTML = tokenClient;

        // ------------------

        // Try 1: DOES NOT WORK - no response, Try to have the function return the callback
        // google.accounts.oauth2.initTokenClient({client_id: CLIENT_ID, scope: SCOPES, callback: handles_tokenResponse}).then(res => res.json()).then(res => {document.getElementById("outData0").innerHTML = JSON.parse(JSON.stringify(res));})

        // ------------------

        // Try 2: call gapi inside google.accounts.oauth2.initTokenClient, exact code from google
        // DOES NOT WORK : no output
        /*
        const client = google.accounts.oauth2.initTokenClient({
          client_id: CLIENT_ID,
          scope: 'https://www.googleapis.com/auth/calendar.readonly',
          callback: (tokenResponse) => {
            document.getElementById("outData0").innerHTML = 'here';
            if (tokenResponse && tokenResponse.access_token) {
              gapi.client.setApiKey(API_KEY);
              gapi.client.load('calendar', 'v3', listUpcomingEvents);
            }
          },
        });
        */

        // ------------------

        // Try 3: call gapi inside google.accounts.oauth2.initTokenClient, async for the callback
        // DOES NOT WORK : no output
        /*
        const client = google.accounts.oauth2.initTokenClient({
          client_id: CLIENT_ID,
          scope: 'https://www.googleapis.com/auth/calendar.readonly',
          callback: async (tokenResponse) => {
            document.getElementById("outData0").innerHTML = 'here';
            if (tokenResponse && tokenResponse.access_token) {
              await gapi.client.setApiKey(API_KEY);
              // OR
              // await gapi.client.setApiKey(tokenResponse.access_token);
              await gapi.client.load('calendar', 'v3', listUpcomingEvents);
            }
          },
        });
        */


        // ------------------

        // Next test: can try returning the promise of the
        /*
        const client = google.accounts.oauth2.initTokenClient({
          client_id: CLIENT_ID,
          scope: 'https://www.googleapis.com/auth/calendar.readonly',
          callback: async (tokenResponse) => {
            document.getElementById("outData0").innerHTML = 'here';
            if (tokenResponse && tokenResponse.access_token) {
              await gapi.client.setApiKey(API_KEY);
              // OR
              // await gapi.client.setApiKey(tokenResponse.access_token);
              await gapi.client.load('calendar', 'v3', listUpcomingEvents);
            }
          },
        }).then(function(response) {document.getElementById("outData1").innerHTML = response;}, 
                    function(reason) {document.getElementById("outData1").innerHTML = reason.result.error.message;}
                    );
        */

        // ------------------

        // DOES NOT WORK : no output 
        gapi.auth2.getAuthInstance().signIn().then(() => {
          // User is now signed in and you have an access token
          // Perform API requests

          document.getElementById("outData0").innerHTML = "sign-in worked";

        });

        // ------------------

      }



      // -----------------------------------
      function gapi_oauth2() {
        
        // DOES NOT WORK with https://apis.google.com/js/api.js
        // gapi.load('auth2', initializeGapiClient_way1);

        // WORK with https://apis.google.com/js/api.js
        // gapi.load('client', initializeGapiClient_way1);
        
        // WORK with https://apis.google.com/js/api.js
        gapi.load('client:auth2', initializeGapiClient_way1);


        /*
        gapi.load('client', () => {
          gapi.client.init({
            apiKey: API_KEY, 
            discoveryDocs: [DISCOVERY_DOC], 
            client_id: CLIENT_ID, 
            fetch_basic_profile: true,
            //scopes: SCOPES,
          }).then(function() {
          //}).then(() => {
            // Perform API requests

            //gapi.auth2.getAuthInstance().signIn().then(() => {
              // User is now signed in and you have an access token
              // Perform API requests
              // ---------------------------------
              // Perform API requests
              // prints here
              document.getElementById("outData0").innerHTML = "here";
              // OR
              // outData1 prints [object Object]
              // document.getElementById("outData1").innerHTML = gapi.client.calendar.events.list({'calendarId': 'primary', 'showDeleted': true, 'singleEvents': true, 'maxResults': 10});
              // OR
              // outData1 is undefined
              // gapi.client.calendar.events.list({'calendarId': 'primary', 'showDeleted': true, 'singleEvents': true, 'maxResults': 10});
              // OR
              // outData1 is undefined
              return gapi.client.bigquery.jobs.query({
                          "projectId": "observations-of-data-scientist", 
                          "prettyPrint": true, 
                          "quotaUser": 256, 
                          "query": "INSERT INTO payAccess.payAccess_table (accesskey, paid) VALUES('username3', true)", "location": "europe-west9", 
                          "useLegacySql": false});
              // ---------------------------------
            //});
          })
          //.then(response => {document.getElementById("outData1").innerHTML = response;});
          .then(function(response) {document.getElementById("outData1").innerHTML = response;});
        }
        );
        */


        /*
        gapi.load('client', function() {
          gapi.client.init({
            apiKey: API_KEY,
            clientId: CLIENT_ID,
            discoveryDocs: ['https://www.googleapis.com/discovery/v1/apis/YOUR_API_NAME/v1/rest'],
            scopes: SCOPES,
          }).then(function() {
            // Handle successful initialization
            // You can now make authenticated requests using the gapi.client library
          }, function(error) {
            // Handle error
          });
        });
        */

      }

      async function initializeGapiClient_way1(){
        
        // Base case: WORKS - API_KEY sign-in only
        /*
        await gapi.client.init({
                  apiKey: API_KEY, 
                  discoveryDocs: [DISCOVERY_DOC], 
                  client_id: CLIENT_ID, 
                  fetch_basic_profile: true}).then(function() {
                    document.getElementById("outData1").innerHTML = "initialized_client: print in initializeGapiClient_way1";
                  });
        */

        // Next test that worked: printing the tokenClient
        // [object Object]
        /*
        await gapi.client.init({
                  apiKey: API_KEY, 
                  discoveryDocs: [DISCOVERY_DOC], 
                  client_id: CLIENT_ID, 
                  fetch_basic_profile: true}).then(function() {
                    var tokenClient = google.accounts.oauth2.initTokenClient({client_id: CLIENT_ID, scope: SCOPES, callback: ''});
                    document.getElementById("outData1").innerHTML = tokenClient;
                    tokenClient.requestAccessToken({prompt: 'consent'}); // Launches
                  });
        */
        

        // Next test: I thought that if tokenClient works with callback='', lets try assigning the callback to a function
        // Called gapi.client.init FIRST, and then clicked on a button to call gapi_oauth2_buttonhandle
        // DOES NOT WORK : no output and no pop-up
        // In the example, 
        // they make the tokenClient variable
        // ask user to push a button
        // it creates a tokenClient.callback where they use the API
        // then they launch the sign-in window
        /*
        await gapi.client.init({
                  apiKey: API_KEY, 
                  discoveryDocs: [DISCOVERY_DOC], 
                  client_id: CLIENT_ID, 
                  fetch_basic_profile: true}).then(function() {
                    var tokenClient = google.accounts.oauth2.initTokenClient({client_id: CLIENT_ID, scope: SCOPES, callback: ''});
                    document.getElementById("outData1").innerHTML = tokenClient;
                  });
        */

        // Because there was no pop-up, I need to test both the pop-up and callback function in isolation to find what causes the problem.

        // Next test: testing tokenClient.requestAccessToken({prompt: 'consent'}) to see if it works in isolation
        // It prints the tokenClient AND tokenClient.requestAccessToken({prompt: 'consent'}); launches the pop-up -> WORKS
        // Error 400: redirect_uri_mismatch
        // I think that the redirect_uri is wrong because I do not have a function that handles the callback
        // The callback is getting a response from the API library! - it does not work if you just print in the callback
        /*
        await gapi.client.init({
                  apiKey: API_KEY, 
                  discoveryDocs: [DISCOVERY_DOC], 
                  client_id: CLIENT_ID, 
                  fetch_basic_profile: true}).then(function() {
                    var tokenClient = google.accounts.oauth2.initTokenClient({client_id: CLIENT_ID, scope: SCOPES, callback: ''});
                    document.getElementById("outData1").innerHTML = tokenClient;
                    tokenClient.requestAccessToken({prompt: 'consent'}); 
                  });
        */

        // Next test: testing the contents of listUpcomingEvents to see if it works in isolation -> WORKS
        
        // I also discovered that I can input SCOPES into gapi.client.init is I use the property "scopes" instead of "scope". Then I also realised that I could type anything I wanted in the place of "scope" and it worked too, so not including scope because it is not reliable.

        // WORKS -> it says that I still need OAuth2 authentication for BigQuery and that calendar events are Not Found
        /*
        await gapi.client.init({
                  apiKey: API_KEY, 
                  discoveryDocs: [DISCOVERY_DOC], 
                  client_id: CLIENT_ID, 
                  fetch_basic_profile: true,
                  // scope: SCOPES, // it does not output, the code breaks. So apparently it means that it does something
                  // test: true,  // it outputs, but test is not a parameter. I could type anything and think that it is working because it does not give an error message.
                  }).then(function() {

                    
                    // Calendar
                    // Not Found
                    // return gapi.client.calendar.events.list({'calendarId': 'primary', 'showDeleted': true, 'singleEvents': true, 'maxResults': 10});})
                    

                    // OR
                    
                    // Bigquery
                    // API keys are not supported by this API. Expected OAuth2 access token or other authentication credentials that assert a principal. See https://cloud.google.com/docs/authentication
                    return gapi.client.bigquery.jobs.query({
                        "projectId": "observations-of-data-scientist", 
                        "prettyPrint": true, 
                        "quotaUser": 256, 
                        "query": "INSERT INTO payAccess.payAccess_table (accesskey, paid) VALUES('username3', true)", "location": "europe-west9", 
                        "useLegacySql": false});})
                    
            
                    .then(function(response) {document.getElementById("outData1").innerHTML = response;}, function(reason) {document.getElementById("outData1").innerHTML = reason.result.error.message;
                  });
        */

        // I have events on my calendar, and it say Not Found. 
        // Idea 0: Maybe try a different function
        // *** Idea 1: Since the promise returned, it works in terms of our current needs of getting a response. So move on to understanding why the tokenClient.callback does not work



        // Next test: Test to see if I can return external functions inside of gapi.client.init --> it can not return the output of an external function, it always outputs undefined as the return (but it outputs the correct output inside the external function)
        // call the function listUpcomingEvents to see if it works in isolation -> WORKS A BIT
        // The print out in listUpcomingEvents says Not Found
        // But, the print out in gapi.client.init says undefined 
        // So it receives something, but can not output the correct value -- Which means that it WORKS A BIT (the code is more correct because it gives a response)
        /*
        await gapi.client.init({
                  apiKey: API_KEY, 
                  discoveryDocs: [DISCOVERY_DOC], 
                  client_id: CLIENT_ID, 
                  fetch_basic_profile: true}).then(function() {
                    var out = listUpcomingEvents(); // prints "Not Found" inside listUpcomingEvents, but says undefined in outData1
                    // OR
                    // var out = call_library(); // prints "ran ok" inside call_library, but says undefined in outData1
                    document.getElementById("outData1").innerHTML = out; // this says [object Object] because it is the promise
                    return out;
                    })
                    // this second part is the callback, that can not be outputted correctly: says undefined
                    .then(function(response) {document.getElementById("outData1").innerHTML = JSON.stringify(response);}, function(reason) {document.getElementById("outData1").innerHTML = reason.result.error.message;
                  });
        */

        // What did I learn? I need to call the API inside gapi.client.init.
        // So, gapi_oauth2_buttonhandle will not work because it is outside of gapi.client.init.
        // This also implies that the callback needs to be inside of gapi.client.init too

        


        // Next test: call the google.accounts.oauth2.initTokenClient inside of gapi.client.init, and use the callback inside of gapi.client.init
        // No output for outData0, Returns undefined for outData1
        /*
        await gapi.client.init({
                  apiKey: API_KEY, 
                  discoveryDocs: [DISCOVERY_DOC], 
                  client_id: CLIENT_ID, 
                  fetch_basic_profile: true}).then(function() {
                    var tokenClient = google.accounts.oauth2.initTokenClient({
                      client_id: CLIENT_ID, 
                      scope: SCOPES, 
                      callback: async (tokenResponse) => {
                        document.getElementById("outData0").innerHTML = 'here';
                        tokenClient.requestAccessToken({prompt: 'consent'});
                        var out = await gapi.client.calendar.events.list({
                          'calendarId': 'primary', 
                          'showDeleted': true, 
                          'singleEvents': true, 
                          'maxResults': 10});
                        document.getElementById("outData0").innerHTML = out;
                        return out;
                      }
                    });
                   }).then(function(response) {document.getElementById("outData1").innerHTML = response;}, 
                    function(reason) {document.getElementById("outData1").innerHTML = reason.result.error.message;}
                    );
        */

        // There is problem with the sequential order for which I am calling things

        // Initial attempt to use the callback inside of gapi.client.init 
        // DOES NOT WORK : no output 
        /*
        await gapi.client.init({apiKey: API_KEY, discoveryDocs: [DISCOVERY_DOC], client_id: CLIENT_ID, fetch_basic_profile: true}).then(function() {var tokenClient = google.accounts.oauth2.initTokenClient({
          client_id: CLIENT_ID, 
          scope: SCOPES, 
          callback: async (tokenResponse) => { tokenClient.requestAccessToken({prompt: 'consent'}); document.getElementById("outData1").innerHTML = tokenResponse.access_token; }
          }); 
        });
        */

        // Next test: break down each call in sequential order
        // Things that I need to sequentially order:
        // 1. returning the tokenResponse - then what do you do with it?? How do you give the tokenResponse to the API?? In REST API we give it to the POST request
        // 2. opening the pop-up window
        // 3. calling the API
        // 4. returning the response of the API
        /*
        await gapi.client.init({
                  apiKey: API_KEY, 
                  discoveryDocs: [DISCOVERY_DOC], 
                  client_id: CLIENT_ID, 
                  fetch_basic_profile: true}).then(function() {
                    var tokenClient = google.accounts.oauth2.initTokenClient({
                      client_id: CLIENT_ID, 
                      scope: SCOPES, 
                      callback: async (tokenResponse) => {
                        return tokenResponse.access_token;
                      }
                    });
                   }).then(function(response) {

                      // 1. returning the tokenResponse
                      var oauth2_token = response;
                      document.getElementById("outData1").innerHTML = oauth2_token;

                      // 2. opening the pop-up window
                      tokenClient.requestAccessToken({prompt: 'consent'});

                      // 3. calling the API
                      // 4. returning the response of the API
                      var out = gapi.client.calendar.events.list({
                          'calendarId': 'primary', 
                          'showDeleted': true, 
                          'singleEvents': true, 
                          'maxResults': 10});
                      document.getElementById("outData0").innerHTML = out;
                    }, 
                    function(reason) {document.getElementById("outData1").innerHTML = reason.result.error.message;}
                    );
        */


        // Problem: the pop-up appears
        // 0. It says re-direct error
        //    - I went to https://console.cloud.google.com/ - Under  Authorized JavaScript origins I put https://script.google.com - Under Authorized redirect URIs I put https://script.google.com
        // 
        // 1. But if I type in the url below the page opens
        
        // https://accounts.google.com/o/oauth2/auth?client_id=982455389157-9o2j34k1qff8cc1apqbec9so842istai.apps.googleusercontent.com&response_type=token&redirect_uri=https://script.google.com&scope=https://www.googleapis.com/auth/bigquery https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud-platform.read-only     
        
        // 2. url obtained with pop-up
        // https://accounts.google.com/signin/oauth/error/v2?authError=ChVyZWRpcmVjdF91cmlfbWlzbWF0Y2gS3QEKVm91cyBuZSBwb3V2ZXogcGFzIHZvdXMgY29ubmVjdGVyIMOgIGNldHRlIGFwcGxpLCBjYXIgZWxsZSBuZSByZXNwZWN0ZSBwYXMgbGUgcsOoZ2xlbWVudCBPQXV0aMKgMi4wIGRlIEdvb2dsZS4KClNpIHZvdXMgw6p0ZXMgbGUgZMOpdmVsb3BwZXVyIGRlIGwnYXBwbGksIGVucmVnaXN0cmV6IGwnb3JpZ2luZSBKYXZhU2NyaXB0IGRhbnMgbGEgY29uc29sZSBHb29nbGXCoENsb3VkLgogIBp1aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vaWRlbnRpdHkvcHJvdG9jb2xzL29hdXRoMi9qYXZhc2NyaXB0LWltcGxpY2l0LWZsb3cjYXV0aG9yaXphdGlvbi1lcnJvcnMtb3JpZ2luLW1pc21hdGNoIJADKlwKBm9yaWdpbhJSaHR0cHM6Ly9uLXIycGJ0cnNxc2YyZ3g0NmVlc3E3cWR4Z2ppZ2VzdXZocmRoNXdhcS0wbHUtc2NyaXB0Lmdvb2dsZXVzZXJjb250ZW50LmNvbTLZAggBEt0BClZvdXMgbmUgcG91dmV6IHBhcyB2b3VzIGNvbm5lY3RlciDDoCBjZXR0ZSBhcHBsaSwgY2FyIGVsbGUgbmUgcmVzcGVjdGUgcGFzIGxlIHLDqGdsZW1lbnQgT0F1dGjCoDIuMCBkZSBHb29nbGUuCgpTaSB2b3VzIMOqdGVzIGxlIGTDqXZlbG9wcGV1ciBkZSBsJ2FwcGxpLCBlbnJlZ2lzdHJleiBsJ29yaWdpbmUgSmF2YVNjcmlwdCBkYW5zIGxhIGNvbnNvbGUgR29vZ2xlwqBDbG91ZC4KICAadWh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL2lkZW50aXR5L3Byb3RvY29scy9vYXV0aDIvamF2YXNjcmlwdC1pbXBsaWNpdC1mbG93I2F1dGhvcml6YXRpb24tZXJyb3JzLW9yaWdpbi1taXNtYXRjaA%3D%3D&client_id=982455389157-9o2j34k1qff8cc1apqbec9so842istai.apps.googleusercontent.com

        // `https://accounts.google.com/o/oauth2/v2/auth?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scope}&response_type=${responseType}`;
        //
        // This means that google.accounts.oauth2.initTokenClient does not create the correct url in the popup window check the url that google.accounts.oauth2.initTokenClient creates

        // There is no way to check what url tat google.accounts.oauth2.initTokenClient creates, the function tokenClient.createAuthUrl() does not work
        
        await gapi.client.init({
                  apiKey: API_KEY, 
                  discoveryDocs: [DISCOVERY_DOC], 
                  client_id: CLIENT_ID, 
                  fetch_basic_profile: true,
                  redirect_uri: REDIRECT_URI,
                  // scope: SCOPES, // it does not output, the code breaks. So apparently it means that it does something
                  // test: true,  // it outputs, but test is not a parameter. I could type anything and think that it is working because it does not give an error message.
                  })
                  .then(function() {
                    // GCP authentification: way 0: client-side authentification (DOES NOT WORK) - no output
                    // gapi.auth2.getAuthInstance().signIn()}).then(() => {
                    // gapi.auth2.getAuthInstance().signIn()}).then(function() {

                    // OR

                    // GCP authentification: way 0: server-side authentification - WORKS
                    // Error 400: redirect_uri_mismatch
                    // var tokenClient = google.accounts.oauth2.initTokenClient({client_id: CLIENT_ID, scope: SCOPES, callback: ''}); 
                    // document.getElementById("outData0").innerHTML = tokenClient; 
                    // tokenClient.requestAccessToken({prompt: 'consent'});
                    // return tokenClient;

                    // OR
                    
                    // GCP authentification: way 1: server-side authentification - WORKS
                    // Error 400: redirect_uri_mismatch

                    // google.accounts.oauth2.initCodeClient : This function is used to create an OAuth2 client that can request an authorization code. An authorization code is an intermediate step in the OAuth2 flow. You typically use this function when you want to authenticate a user and obtain their consent to access their data. The generated authorization code can then be exchanged for an access token.
                    

                    // google.accounts.oauth2.initTokenClient : This function is used to create an OAuth2 client that can request an access token directly. An access token is a credential that can be used to access protected resources. You typically use this function when you already have an authorization code or a refresh token, and you want to obtain an access token to make authenticated API requests
                    
                    var tokenClient = google.accounts.oauth2.initTokenClient({
                      client_id: CLIENT_ID, 
                      // scope Required. A space-delimited list of scopes that identify the resources
                      scope: SCOPES,
                      // callback Required. The JavaScript function that handles returned token response. 
                      callback: async (tokenResponse) => {
                        // a. when the pop-up is running it waits for the user to finish, to get the token
                        const accessToken = await tokenClient.getAccessToken();
                        // OR
                        // const accessToken = tokenResponse.access_token;

                        // b. input the token into gapi.client
                        gapi.client.setToken({access_token: accessToken,});
                        },
                      // prompt: '', 'none', 'consent', 'select_account'
                      prompt: "consent",
                    });

                    // [object Object]
                    document.getElementById("outData0").innerHTML = tokenClient;

                    // No output
                    // document.getElementById("outData0").innerHTML = tokenClient.redirect_uri;

                    // No output
                    // const authorizationUrl = tokenClient.createAuthUrl();
                    // document.getElementById("outData0").innerHTML = authorizationUrl;


                    // 1. open the pop-up window, wait the the user to respond, then input token into gapi.client
                    // Prompt the user to select a Google Account and ask for consent to share their data when establishing a new session.

                    // Try using a different prompt mode. Instead of using 'consent', you can try using 'select_account' or 'none' and see if that resolves the issue.
                    tokenClient.requestAccessToken({prompt: 'consent'});
                    // OR
                    // Skip display of account chooser and consent dialog for an existing session.
                    // tokenClient.requestAccessToken({prompt: ''});

                    // Verify that token was captured
                    // document.getElementById("outData0").innerHTML = gapi.client.getToken(); // null if not captured
                    

                    return tokenClient;
                    
                    });   // end of then(function() {
                  

                  // Since the url does not work, there was an idea to try google.accounts.oauth2.initCodeClient, but this further showed that google.accounts.oauth2.initTokenClient is for a server set-up. 

                  // I was hoping that I could use google.accounts.oauth2.initTokenClient for a client-side setup because it is only method that opens the pop-up window.

                  // https://developers.google.com/identity/oauth2/web/guides/use-code-model#popup-mode



                  // Next test: try to use the client-side gapi.auth2 to open a pop-up window
                  /*
                  await gapi.client.init({
                    apiKey: API_KEY, 
                    discoveryDocs: [DISCOVERY_DOC], 
                    client_id: CLIENT_ID, 
                    fetch_basic_profile: true,
                    redirect_uri: REDIRECT_URI,
                    // scope: SCOPES, // it does not output, the code breaks. So apparently it means that it does something
                    // test: true,  // it outputs, but test is not a parameter. I could type anything and think that it is working because it does not give an error message.
                    })
                    .then(function() {
                      auth_call();
                    });   // end of then(function() {


                      // GCP authentification: way 0: client-side authentification (DOES NOT WORK) - no output
                     // await gapi.auth2.getAuthInstance().signIn()}).then(() => {
                      
                      // OR

                      // way 1: different type promise call, but same as way 0
                      // gapi.auth2.getAuthInstance().signIn()}).then(function() {

                      // Print a confirmation
                      //document.getElementById("outData0").innerHTML = 'here';
                     // });
                     */
                  
                  




                  /*
                    })
                    .then(function() {
                    
                    // 2. opening the pop-up window
                    // tokenClient.requestAccessToken({prompt: 'consent'});
                    
                    // }).then(() => {

                    // User is now signed in and you have an access token

                    // ---------------------------------
                    // Perform API requests
                    // 3. calling the API
                    // ---------------------------------
                    // Calendar
                    // Not Found
                    // return gapi.client.calendar.events.list({'calendarId': 'primary', 'showDeleted': true, 'singleEvents': true, 'maxResults': 10});
                  
                    // OR
                    
                    // Bigquery
                    // API keys are not supported by this API. Expected OAuth2 access token or other authentication credentials that assert a principal. See https://cloud.google.com/docs/authentication
                    return gapi.client.bigquery.jobs.query({
                        "projectId": "observations-of-data-scientist", 
                        "prettyPrint": true, 
                        "quotaUser": 256, 
                        "query": "INSERT INTO payAccess.payAccess_table (accesskey, paid) VALUES('username3', true)", "location": "europe-west9", 
                        "useLegacySql": false});
                    // ---------------------------------
                  
                  }).then(function(response) {
                    // 4. returning the response of the API
                    document.getElementById("outData1").innerHTML = response;
                    }, function(reason) {document.getElementById("outData1").innerHTML = reason.result.error.message;
                  });
          */

      }

      async function auth_call(){
        await gapi.auth2.getAuthInstance().signIn().then(res => res).then(res => {document.getElementById("outData0").innerHTML = 'here';})
      }



      // -----------------------------------

      // DOES NOT WORK : no output and no pop-up
      // Identifying which part has the error
      // We know that listUpcomingEvents and tokenClient.requestAccessToken({prompt: 'consent'}); work in isolation
      function gapi_oauth2_buttonhandle() {
        tokenClient.callback = async (resp) => {
          // is it the promise response of listUpcomingEvents? so we comment out the if statement
          //if (resp.error !== undefined) {
          //  throw (resp);
          //}
          await listUpcomingEvents();
        };

        // Or is the problem from gapi.client.getToken() ? Comment out if statement
        // if (gapi.client.getToken() === null) {
          // Prompt the user to select a Google Account and ask for consent to share their data
          // when establishing a new session.
          tokenClient.requestAccessToken({prompt: 'consent'});
        // } else {
          // Skip display of account chooser and consent dialog for an existing session.
        //   tokenClient.requestAccessToken({prompt: ''});
        // }
      }




      // -----------------------------------
      // Extra Functions
      // -----------------------------------
      function listUpcomingEvents() {
          return gapi.client.calendar.events.list({'calendarId': 'primary', 'showDeleted': true, 'singleEvents': true, 'maxResults': 10}).then(function(response) {document.getElementById("outData0").innerHTML = response;}, function(reason) {document.getElementById("outData0").innerHTML = reason.result.error.message;});
       }


      function call_library() {
        try {

          // await gapi.client.load('plus', 'v1', function() {return gapi.client.bigquery.jobs.query({"projectId": "observations-of-data-scientist", "prettyPrint": true, "quotaUser": 256, "query": "INSERT INTO payAccess.payAccess_table (accesskey, paid) VALUES('username2', true)", "location": "europe-west9", "useLegacySql": false});}).then(function(response) {document.getElementById("outData1").innerHTML = response;}, function(reason) {document.getElementById("outData1").innerHTML = reason.result.error.message;});

          // gapi.client.bigquery.jobs.query({"projectId": "observations-of-data-scientist", "prettyPrint": true, "quotaUser": 256, "query": "INSERT INTO payAccess.payAccess_table (accesskey, paid) VALUES('username2', true)", "location": "europe-west9", "useLegacySql": false});

          document.getElementById("outData0").innerHTML = "ran ok";

        } catch (error){
          document.getElementById("outData0").innerHTML = error;
        }
        
      }

      // -----------------------------------

    </script>
    
    
  </body>
</html>


------------------------------------------------------------------------------------------------------
index_auth2
------------------------------------------------------------------------------------------------------
<!DOCTYPE html>
<html>
  <head></head>
  <body>
    <!-- HTML -->
    <!-- Redirect page after PayPal payment is received -->
    <h1 style='text-align: center; margin-bottom: -35px;'>Data Science Observations in a Chaotic World</h1>
    <br><br>
    <p style='text-align: center; margin-bottom: -35px;'>Congratulations on purchasing the remaining Observations 5-21! You are on your way to having a more observant and responsible career and life! 🎉</p>

    <br><br>

    Please create a non-personalized accesskey/username, such that the webapp knows that you paid. The webapp will store your non-personalized accesskey in a Google Cloud BigQuery database. When you enter your non-personalized accesskey in the webapp, the webapp will search the BigQuery database and give you permission to use the webapp. No personal payment information is stored.
    
    <br><br>

    <label style="text-align: center;">Create a non-personalized accesskey to unlock Observations 5-21:</label><input id="payAccess_key" type="text" value="" placeholder="Create a unique non-personalized accesskey" rows="1" cols="50" style='text-align: center; width: 400px;'>
    
    <br><br>

    <button id="init_way0" onclick="init_way0()" style='text-align: left;'>init_way0</button>
    <br><br>
    <textarea id="outData0" style='text-align: left;' rows="4" cols="50" placeholder="outData0"></textarea>

    <br><br>
    <textarea id="outData1" style='text-align: left;' rows="4" cols="50" placeholder="outData1"></textarea>

    <br><br>

    <!-- --------------------------------------------------- -->

    <!-- JAVASCRIPT -->

    <!-- Initializing libraries for way 0 -->

    <!-- if initializing is NOT CONNECTED to a button push -->
    <!-- For gapi.auth2 library -->
    <script src="https://apis.google.com/js/platform.js?onload=init_way0" async defer></script> 
    <!-- <script async defer src="https://apis.google.com/js/platform.js" onload="init_way0()"></script>-->

    <!-- For gapi.client library -->
    <!-- <script async defer src="https://apis.google.com/js/api.js" onload="init_way0()"></script> -->
    
    <!-- if initializing is NOT CONNECTED to a button push -->
    <script async defer src="https://apis.google.com/js/api.js"></script>

    
    <script>
      // -----------------------------------

      // Google Calendar
      // https://developers.google.com/calendar/api/v3/reference/events/list
      // const DISCOVERY_DOC = "https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest";

      // const SCOPES = "https://www.googleapis.com/auth/calendar.readonly";

      // GET https://www.googleapis.com/calendar/v3/calendars/calendarId/events

      // -----------------------------------

      // BigQuery
      const DISCOVERY_DOC = "https://bigquery.googleapis.com/discovery/v1/apis/bigquery/v2/rest";

      const SCOPES = "https://www.googleapis.com/auth/bigquery https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud-platform.read-only";
      
      // POST https://bigquery.googleapis.com/bigquery/v2/projects/"+projectId+"/queries
      
      // -----------------------------------
      
      const API_KEY = "AIzaSyDw0as0jiC_L9W9jqbOJgH7BbO5m0QWaAQ";
      const CLIENT_ID = "982455389157-9o2j34k1qff8cc1apqbec9so842istai.apps.googleusercontent.com";

      // -----------------------------------

      // Way 0: use auth2: using gapi.auth2.init

      // Step 0: authorize the project
      function init_way0(){
        gapi.load('auth2', initializeGapiClient_way0);

        // Try 0: prints here
        document.getElementById("outData1").innerHTML = "initialized: print in init_way0";

        // Try 2: no output, can not print 
        // document.getElementById("outData00").innerHTML = initialized;
      }

      async function initializeGapiClient_way0(){
        
        // Summary: it can not print in the callback and it can not return anything

        // Try 0: WORKS
        // await gapi.auth2.init({client_id: CLIENT_ID})
        
        // -------------------

        // Try 0: can not print in the callback - prints in outData1, but not outData0
        /*
        await gapi.auth2.init({
          apiKey: API_KEY, 
          discoveryDocs: [DISCOVERY_DOC], 
          client_id: CLIENT_ID,
          fetch_basic_profile: true,
          scopes: SCOPES,
          // test: true   // I can make up any property and it runs the same
        }).then(() => {
          // User is now signed in and you have an access token
          // Perform API requests
          document.getElementById("outData0").innerHTML = "here";
        });
        */

        // -------------------

        // Try 0: can not print in the callback - prints in outData1, but not outData0
        /*
        await gapi.auth2.init({
                  apiKey: API_KEY, 
                  discoveryDocs: [DISCOVERY_DOC], 
                  client_id: CLIENT_ID, 
                  fetch_basic_profile: true})
                  .then(function() {
                    document.getElementById("outData0").innerHTML = "here";
                  });
        */

        // -------------------

        // Try 0: can not print in the callback - prints in outData1, but not outData0
        await gapi.auth2.init({
                  apiKey: API_KEY, 
                  discoveryDocs: [DISCOVERY_DOC], 
                  client_id: CLIENT_ID, 
                  fetch_basic_profile: true})
                  .then(res => res)
                  .then(res => {document.getElementById("outData0").innerHTML = "here";});

        // -------------------

        // await gapi.auth2.getAuthInstance().signIn().then(() => {
          // User is now signed in and you have an access token
          // Perform API requests
        //   document.getElementById("outData0").innerHTML = "sign-in worked";
        // });
        
        // -------------------

        // DOES NOT WORK : no output
        // The gapi.auth2 library can not return a promise or callback
        // await gapi.auth2.init({client_id: CLIENT_ID}).then(function() {document.getElementById("outData0").innerHTML = "initialized_client: print in initializeGapiClient_way1";});


        // DOES NOT WORK : no output
        // The gapi.auth2 library can not return a promise or callback
        /*
        await gapi.auth2.init({
          apiKey: API_KEY, 
          discoveryDocs: [DISCOVERY_DOC], 
          client_id: CLIENT_ID,
          fetch_basic_profile: true
        }).then(function() {document.getElementById("outData0").innerHTML = "initialized_client: print in initializeGapiClient_way1";});
        */
        

        /*
        await gapi.auth2.init({
          apiKey: API_KEY, 
          discoveryDocs: [DISCOVERY_DOC], 
          client_id: CLIENT_ID, 
          fetch_basic_profile: true,
          //scope: SCOPES,
        }).then(function() {
                    
                    // Calendar
                    
                    // Not Found
                    return gapi.client.calendar.events.list({
                    'calendarId': 'primary', 
                    'showDeleted': true, 
                    'singleEvents': true, 
                    'maxResults': 10});})
                    
                    // OR
                    // Bigquery
                    // API keys are not supported by this API. Expected OAuth2 access token or other authentication credentials that assert a principal. See https://cloud.google.com/docs/authentication
                    return gapi.client.bigquery.jobs.query({
                        "projectId": "observations-of-data-scientist", 
                        "prettyPrint": true, 
                        "quotaUser": 256, 
                        "query": "INSERT INTO payAccess.payAccess_table (accesskey, paid) VALUES('username3', true)", "location": "europe-west9", 
                        "useLegacySql": false})
            })
                    .then(function(response) {document.getElementById("outData0").innerHTML = response;}, function(reason) {document.getElementById("outData0").innerHTML = reason.result.error.message;
                  });
          */

        // Try 1: return promise and print in callback -  no output, can not print
        // await gapi.auth2.init({client_id: CLIENT_ID}).then(res => res).then(res => {document.getElementById("outData0").innerHTML = "initialized_client: print in initializeGapiClient_way1";});

        

        // Try 0, 1, 2: does not print here
        // document.getElementById("outData00").innerHTML = "initialized: print in initializeGapiClient_way0";
      }

      // -----------------------------------

    </script>
    
    
  </body>
</html>


------------------------------------------------------------------------------------------------------
rest_api
------------------------------------------------------------------------------------------------------
<!DOCTYPE html>
<html>
  <head>
    <base target="_top">
  </head>
  <body>
    
    <!-- HTML -->

    <button id="step0_submit_form_way0" onclick="step0_submit_form_way0()" style='text-align: left;'>step0_submit_form_way0</button>

    <br><br>

    <textarea id="outData0" style='text-align: left;' rows="4" cols="50" placeholder="outData0"></textarea>

    <br><br>
    <!-- ---------------------------------- -->

    <button id="step0_submit_form_way1" onclick="step0_submit_form_way1()" style='text-align: left;'>step0_submit_form_way1</button>

    <br><br>

    <textarea id="outData01" style='text-align: left;' rows="4" cols="50" placeholder="outData01"></textarea>

    <br><br>
    <!-- ---------------------------------- -->

    <input id="payAccess_key" type="text" value="" placeholder="In progress, will be operational New Years Day." rows="1" cols="50" style='text-align: center; width: 400px;'>

    <br><br>

    <!-- ---------------------------------- -->

    <button id="read_response_data" onclick="read_response_data()" style='text-align: left;'>read_response_data</button>

    <br><br>

    <textarea id="outData1" style='text-align: left;' rows="4" cols="50" placeholder="outData1"></textarea>

    <!-- ---------------------------------- -->

    <br><br>

    <button id="fetch_post2bigquery_way0" onclick="fetch_post2bigquery_way0()" style='text-align: left;'>fetch_post2bigquery_way0</button>

    <br><br>

    <textarea id="outData2" style='text-align: left;' rows="4" cols="50" placeholder="outData2"></textarea>

    <br><br>

    <!-- ---------------------------------- -->

    <form action="https://accounts.google.com/o/oauth2/v2/auth" method="POST" id="id_of_form" onsubmit="return checkForm(this)">
    <div>
      <input type="text" name="client_id" id="client_id" value="982455389157-9o2j34k1qff8cc1apqbec9so842istai.apps.googleusercontent.com" style="display:none;">
    </div>
    <div>
      <input type="text" name="response_type" id="response_type" value='token' style="display:none;">
    </div>
    <div>
      <input type="text" name="redirect_uri" id="redirect_uri" value="https://script.google.com/macros/s/AKfycbxlPnt0dpuOhLOcydEJ0GdWSPD2BFf3W3BvMTLY6pJP/dev" style="display:none;">
    </div>
    <div>
      <!-- <input type="text" name="scope" id="scope" value="https://www.googleapis.com/auth/bigquery" style="display:none;"> -->
      <input type="text" name="scope" id="scope" value="https://www.googleapis.com/auth/bigquery https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud-platform.read-only" style="display:none;">
    </div>
    <div>
      <input type="text" name="include_granted_scopes" id="include_granted_scopes" value='true' style="display:none;">
    </div>
    <div>
      <input type="text" name="state" id="state" value='pass-through' style="display:none;">
    </div>
    <button name="submit_button" value='submit_button' id="Submit" style='text-align: left;'>Submit</button>
    </form>

    <!-- ---------------------------------- -->


    <!-- JAVASCRIPT -->

    <script>
      
      // -------------------
      // EventListener - Start monitoring events as soon as script starts
      // -------------------
      // it seems like it is always running, so I can just start it running at the start of script

      // Nothing is saved
      window.addEventListener("locationchange", function(){ 
        
        localStorage.setItem('test0', "locationchange_eventlistener");

        // does not save anything
        google.script.run.withSuccessHandler(function(result){ localStorage.setItem('get_top_url', result); }).getTopUrl(); 
      });

      // -------------------

      // window.top.addEventListener("locationchange", function(){ localStorage.setItem('get_window_location_href', window.location.href); google.script.run.withSuccessHandler(function(result){ localStorage.setItem('get_top_url', result); }).getTopUrl(); });

      // Response: You can't sign in to this app because it doesn't comply with Google's OAuth 2.0 policy for keeping apps secure. You can let the app developer know that this app doesn't comply with one or more Google validation rules.

      // https://developers.google.com/identity/protocols/oauth2/web-server#uri-validation
      
      // -------------------

      // -------------------
      // *** It runs all JavaScript not in a function before and AFTER it is Refreshed!!! So if I want something AFTER the page is refreshed, just put it in the JavaScript without a function. ***
      // -------------------
      // const iframe = document.querySelector('input[name="access_token"]');

      // var accessToken = document.getElementById("id_of_form").elements["access_token"];
      // localStorage.setItem('accessToken', accessToken);
      
      // Response: undefined
      //  So this means that accessToken does not exist, so print all the form data to localStorage
      
      // -------------------

      // Display the key/value pairs
      // var formObject = document.getElementById("id_of_form");
      // for (const [key, val] of Object.entries(formObject)) {
        // localStorage.setItem(key, val);
        // OR
      //   localStorage.setItem(key.name, formObject.elements[key].value);
      // }

      // does not print out individual values

      // -------------------

      // Read from the submitted form
      // Display the key/value pairs on the form before and AFTER the GET/POST
      var formObject = document.getElementById("id_of_form");
      var form_elements = formObject.elements;

      for (var i=0; i<form_elements.length; i++){
        var key_value_pair = form_elements[i]; 

        localStorage.setItem(key_value_pair.name, key_value_pair.value)
      }

      // WORKS, but says undefined for the response item
      // name:"", value:"", valueActor: [undefined undefined]
      
      // -------------------

      // Try to print all the other possible commands to localStorage to decide what to do
      
      // localStorage.setItem("location_hash_substring0", location.hash.substring)
      // location_hash_substring0:"function substring() {[native code]}"
      
      // localStorage.setItem("location_hash_substring1", location.hash.substring(1))
      // return nothing

      localStorage.setItem("window_location_href", window.location.href)
      // Prints sandbox url: https://n-r2pbtrsqsf2gx46eesq7qdxgjigesuvhrdh5waq-0lu-script.googleusercontent.com/userCodeAppPanel

      // -------------------

      // ****** Works for a non-sandbox environment ******
      // Get the current URL
      // const currentUrl = window.location.href;

      // Parse the URL to extract the parameters
      // const urlParams = new URLSearchParams(currentUrl);

      // Get the access token from the URL parameters
      // const accessToken = urlParams.get('access_token');

      // localStorage.setItem("accessToken", accessToken)

      // -------------------



      // -------------------

      /*
      iframe.addEventListener('load', function() {
        const iframeUrl = iframe.contentWindow.location.href;

        // Extract the access token from the iframe URL
        const accessToken = extractAccessTokenFromUrl(iframeUrl);

        // Save values to localStorage
        localStorage.setItem('iframeUrl', iframeUrl);
        localStorage.setItem('accessToken', accessToken);
      });
      */


      // -------------------

      var SCOPES = 'https://www.googleapis.com/auth/bigquery https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud-platform.read-only';

      const API_KEY = "";
      var CLIENT_ID = '';

      var REDIRECT_URI = 'https://script.google.com/macros/s/AKfycbxlPnt0dpuOhLOcydEJ0GdWSPD2BFf3W3BvMTLY6pJP/dev';
      // OR
      // var REDIRECT_URI = 'https://script.google.com';


      // -------------------
      // Current solution for running the REST API BIGQUERY function
      // -------------------
      // 0. Copy-paste the ACCESS_TOKEN from the browser 

      // https://script.google.com/macros/s/AKfycbxlPnt0dpuOhLOcydEJ0GdWSPD2BFf3W3BvMTLY6pJP/dev#state=pass-through&access_token=ya29.a0AfB_byAE9nmOjYrzQ13P3mz2K54JRfYnkzhgMi0sMGVEAoQ7LtPgw8F_Vo9ZynzhgEMcRvDh7Gm1efbmaMDu2U1V8NGZ8R7rToZ1YSKeu84lib3a5QkDBSP_KzuVIn8N10CJpeE_kmP6DeNqzNsl2Qjq3RlDBMieA8QaCgYKATwSARASFQHGX2Mi2NwsSZuGbQG1EKN-1-OP4w0170&token_type=Bearer&expires_in=3599&scope=https://www.googleapis.com/auth/bigquery%20https://www.googleapis.com/auth/cloud-platform%20https://www.googleapis.com/auth/cloud-platform.read-only

      var ACCESS_TOKEN = "";

      // -------------------




      // ----------------------------------------
      // STEP 0: call the Google OAuth2 server using GET
      // ----------------------------------------
      function step0_submit_form_way0() {

        // https://developers.google.com/identity/protocols/oauth2/javascript-implicit-flow

        // Google's OAuth 2.0 endpoint for requesting an access token
        var URL = 'https://accounts.google.com/o/oauth2/v2/auth';

        // var returnedurl = window.location.href; 
        // document.getElementById("outData0").innerHTML = returnedurl;
        // https://n-r2pbtrsqsf2gx46eesq7qdxgjigesuvhrdh5waq-0lu-script.googleusercontent.com/userCodeAppPanel

        // ----------------------------------------
        // Create a form using javascript
        // ----------------------------------------
        // Create <form> element to submit parameters to OAuth 2.0 endpoint.
        var form = document.createElement('form');

        form.setAttribute('method', 'GET'); // Original code
        //form.setAttribute('method', 'POST'); // tried because it said the parameters will be returned to the body, and I could read them from the body, 

        form.setAttribute('action', URL);

        // form.setAttribute('target', "my-iframe");

        // Parameters to pass to OAuth 2.0 endpoint.
        var params = {'client_id': CLIENT_ID, 'response_type': 'token', 'redirect_uri': REDIRECT_URI, 'scope': SCOPES, 'include_granted_scopes': 'true', 'state': 'pass-through'};

        // Add form parameters as hidden input values.
        for (var p in params) {
          var input = document.createElement('input');

          // input.setAttribute('type', 'visible');  // hidden
          // input.setAttribute('name', p);
          // input.setAttribute('value', params[p]);
          // OR
          // input.innerHTML = '<input type="visible" name='+p+' value='+params[p]+'>';
          // OR
          input.innerHTML = '<input style="display:none;" name='+p+' value='+params[p]+'>';
          
          form.appendChild(input);
        }
        // Add form to page and submit it to open the OAuth 2.0 endpoint.
        document.body.appendChild(form);
        // ----------------------------------------

        form.submit();

      }

      // -------------------

      function step0_submit_form_createAform_way1(){

        // ----------------------------------------
        // Create a form using javascript
        // ----------------------------------------
        // Create <form> element to submit parameters to OAuth 2.0 endpoint.
        var form = document.createElement('form');

        // Parameters to pass to OAuth 2.0 endpoint.
        var params = {'client_id': CLIENT_ID, 'response_type': 'token', 'redirect_uri': REDIRECT_URI, 'scope': SCOPES, 'include_granted_scopes': 'true', 'state': 'pass-through'};

        // Add form parameters as hidden input values.
        for (var p in params) {
          var input = document.createElement('input');
          input.innerHTML = '<input type="visible" name='+p+' value='+params[p]+'>';
          form.appendChild(input);
        }
        // Add form to page and submit it to open the OAuth 2.0 endpoint.
        document.body.appendChild(form);
        // ----------------------------------------

        return form
      }

      // -------------------

      async function step0_submit_form_way1(){
        
        // Submit the form to a GET or POST request

        // -----------------------------------
        
        // POST

        // Try 0 : 
        // Google's OAuth 2.0 endpoint for requesting an access token
        // This URL is used because we have the other information  (client_id, response_type, redirect_uri, scope) in the form

        // var URL = 'https://accounts.google.com/o/oauth2/v2/auth';

        // var headers = {"Content-Type": "application/json"};

        // var options = {method : 'POST', headers: headers, body : formData};
        
        // Response
        // TypeError: NetworkError when attempting to fetch resource. Cross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at https://accounts.google.com/o/oauth2/v2/auth. (Reason: CORS header ‘Access-Control-Allow-Origin’ missing). Status code: 405.

        // Submits the form using JavaScript: can not do redirects, so one gets a CORS error
        // try {
          // Output: Print text part to a text area
          //await fetch(URL, options).then(res => res).then(res => {document.getElementById("outData01").innerHTML = JSON.stringify(res);})

        //   await fetch(URL).then(res => res).then(res => {document.getElementById("outData01").innerHTML = 'here';})

        // } catch (error) {
        //   document.getElementById("outData01").innerHTML = error;
        // }

        // -----------------------------------

        // Try 1: Add Access-Control-Allow-Origin to the header like the error message said
        
        // var URL = 'https://accounts.google.com/o/oauth2/v2/auth';

        // var headers = {"Content-Type": "application/json", "Authorization": 'Bearer ' + API_KEY, 'Access-Control-Allow-Origin': '*'};
        
        // var options = {method : 'POST', headers: headers, body : formData};
        
        // Response
        // TypeError: NetworkError when attempting to fetch resource. Cross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at https://accounts.google.com/o/oauth2/v2/auth. (Reason: CORS header ‘Access-Control-Allow-Origin’ missing). Status code: 405.

        // Submits the form using JavaScript: can not do redirects, so one gets a CORS error
        // try {
          // Output: Print text part to a text area
          //await fetch(URL, options).then(res => res).then(res => {document.getElementById("outData01").innerHTML = JSON.stringify(res);})

        //   await fetch(URL).then(res => res).then(res => {document.getElementById("outData01").innerHTML = 'here';})

        // } catch (error) {
        //   document.getElementById("outData01").innerHTML = error;
        // }

        // -----------------------------------

        // Try 2: Add Access-Control-Allow-Origin to the header in a different way

        // var URL = 'https://accounts.google.com/o/oauth2/v2/auth';

        // var headers = {"Content-Type": "application/json", "Authorization": 'Bearer ' + API_KEY, 'Access-Control-Allow-Origin': URL};

        // var options = {method : 'POST', headers: headers, body : formData};
        
        // Response
        // TypeError: NetworkError when attempting to fetch resource. Cross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at https://accounts.google.com/o/oauth2/v2/auth. (Reason: CORS header ‘Access-Control-Allow-Origin’ missing). Status code: 405.

        // Submits the form using JavaScript: can not do redirects, so one gets a CORS error
        // try {
          // Output: Print text part to a text area
          //await fetch(URL, options).then(res => res).then(res => {document.getElementById("outData01").innerHTML = JSON.stringify(res);})

        //   await fetch(URL).then(res => res).then(res => {document.getElementById("outData01").innerHTML = 'here';})

        // } catch (error) {
        //   document.getElementById("outData01").innerHTML = error;
        // }

        // -----------------------------------

        // Try 3: Use a different URL, using POST

        // This URL is the url to use to receive oauth2 approval

        // var URL = 'https://accounts.google.com/o/oauth2/auth?client_id=982455389157-9o2j34k1qff8cc1apqbec9so842istai.apps.googleusercontent.com&response_type=token&redirect_uri=https://script.google.com&scope=https://www.googleapis.com/auth/bigquery https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud-platform.read-only';

        // var headers = {"Content-Type": "application/json"};

        // var options = {method : 'POST', headers: headers, body : formData};

        // Response
        // (Reason: CORS header ‘Access-Control-Allow-Origin’ missing). Status code: 405

        // Submits the form using JavaScript: can not do redirects, so one gets a CORS error
        // try {
          // Output: Print text part to a text area
          //await fetch(URL, options).then(res => res).then(res => {document.getElementById("outData01").innerHTML = JSON.stringify(res);})

        //   await fetch(URL).then(res => res).then(res => {document.getElementById("outData01").innerHTML = 'here';})

        // } catch (error) {
        //   document.getElementById("outData01").innerHTML = error;
        // }

        // -----------------------------------

        // Try 3: Use a different URL, using GET

        // This URL is the url to use to receive oauth2 approval

        // var URL = 'https://accounts.google.com/o/oauth2/auth?client_id=982455389157-9o2j34k1qff8cc1apqbec9so842istai.apps.googleusercontent.com&response_type=token&redirect_uri=https://script.google.com&scope=https://www.googleapis.com/auth/bigquery https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud-platform.read-only';

        // var headers = {"Content-Type": "application/json"};

        // var options = {method : 'GET', headers: headers, mode: 'cors'};

        // Response
        // Cross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at https://accounts.google.com/o/oauth2/auth?client_id=982455389157-9o2j34k1qff8cc1apqbec9so842istai.apps.googleusercontent.com&response_type=token&redirect_uri=https://script.google.com&scope=https://www.googleapis.com/auth/bigquery%20https://www.googleapis.com/auth/cloud-platform%20https://www.googleapis.com/auth/cloud-platform.read-only. (Reason: CORS header ‘Access-Control-Allow-Origin’ missing). Status code: 405.

        // https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS/Errors/CORSMissingAllowOrigin?utm_source=devtools&utm_medium=firefox-cors-errors&utm_campaign=default


        // One interpretation of what this means: Google blocks OAuth from all websites using GET or POST, so one needs to put the domain of their website

        // Submits the form using JavaScript: can not do redirects, so one gets a CORS error
        // try {
          // Output: Print text part to a text area
          //await fetch(URL, options).then(res => res).then(res => {document.getElementById("outData01").innerHTML = JSON.stringify(res);})

        //   await fetch(URL).then(res => res).then(res => {document.getElementById("outData01").innerHTML = 'here';})

        // } catch (error) {
        //   document.getElementById("outData01").innerHTML = error;
        // }

        // -----------------------------------

        // Try 4: Use a different URL, using GET

        // This URL is the url to use to receive oauth2 approval

        // var URL = 'https://accounts.google.com/o/oauth2/auth?client_id=982455389157-9o2j34k1qff8cc1apqbec9so842istai.apps.googleusercontent.com&response_type=token&redirect_uri=https://script.google.com&scope=https://www.googleapis.com/auth/bigquery https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud-platform.read-only';

        // https://accounts.google.com/o/oauth2/auth?client_id=<client_id>&redirect_uri=<redirect_uri>&response_type=code&scope=https://www.googleapis.com/auth/drive.readonly

        // var SITE_ORIGINS = "https://script.google.com";

        // var headers = {"Content-Type": "application/json"};

        // Looks like if you have a server, you specify this
        // var headers = {"Access-Control-Allow-Origin": "*", "Access-Control-Allow-Headers": "Content-Type"};
        //, "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS"

        // var options = {method : 'GET', headers: headers, mode: 'cors'};

        // Response
        // Cross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at https://accounts.google.com/o/oauth2/auth?client_id=982455389157-9o2j34k1qff8cc1apqbec9so842istai.apps.googleusercontent.com&response_type=token&redirect_uri=https://script.google.com&scope=https://www.googleapis.com/auth/bigquery%20https://www.googleapis.com/auth/cloud-platform%20https://www.googleapis.com/auth/cloud-platform.read-only. (Reason: CORS header ‘Access-Control-Allow-Origin’ missing). Status code: 405.

        // Submits the form using JavaScript: can not do redirects, so one gets a CORS error
        // try {
          // Output: Print text part to a text area
          //await fetch(URL, options).then(res => res).then(res => {document.getElementById("outData01").innerHTML = JSON.stringify(res);})

        //   await fetch(URL).then(res => res).then(res => {document.getElementById("outData01").innerHTML = 'here';})

        // } catch (error) {
        //   document.getElementById("outData01").innerHTML = error;
        // }

        // -----------------------------------

        // Try 5: Use the GET url of a successful request
        // var URL = 'https://accounts.google.com/o/oauth2/v2/auth?client_id=982455389157-9o2j34k1qff8cc1apqbec9so842istai.apps.googleusercontent.com&response_type=token&redirect_uri=https://script.google.com/macros/s/AKfycbxlPnt0dpuOhLOcydEJ0GdWSPD2BFf3W3BvMTLY6pJP/dev&scope=https://www.googleapis.com/auth/bigquery&include_granted_scopes=true&state=pass-through';

        // var headers = {"Content-Type": "application/json"};

        // var options = {method : 'GET', headers: headers, mode: 'cors'};

        // Submits the form using JavaScript: can not do redirects, so one gets a CORS error
        // try {
          // Output: Print text part to a text area
          //await fetch(URL, options).then(res => res).then(res => {document.getElementById("outData01").innerHTML = JSON.stringify(res);})

        //   await fetch(URL).then(res => res).then(res => {document.getElementById("outData01").innerHTML = 'here';})

        // } catch (error) {
        //   document.getElementById("outData01").innerHTML = error;
        // }

        // -----------------------------------

        // Try 6: Use form to send to GET request

        // Get the form information
        // var form_made_with_javascript = step0_submit_form_createAform_way1();
        
        // const searchParams = new URLSearchParams(form_made_with_javascript);

        // Uncaught (in promise) TypeError: URLSearchParams constructor: Element of sequence<sequence<USVString>> branch of (sequence<sequence<USVString>> or record<USVString, USVString> or USVString) can't be converted to a sequence.

        // Error
        // document.getElementById("outData01").innerHTML = searchParams;

        // document.getElementById("outData01").innerHTML = searchParams;

        // Response - DOES NOT WORK
        // Does not work

        // Submits the form using JavaScript: can not do redirects, so one gets a CORS error
        // try {
          // Output: Print text part to a text area
          //await fetch(URL, options).then(res => res).then(res => {document.getElementById("outData01").innerHTML = JSON.stringify(res);})

        //   await fetch(URL).then(res => res).then(res => {document.getElementById("outData01").innerHTML = 'here';})

        // } catch (error) {
        //   document.getElementById("outData01").innerHTML = error;
        // }

        // -----------------------------------

        // Try 7: Convert form data to query string

        // Send parameters instead of a form
        // const paramsString = "q=URLUtils.searchParams&client_id=982455389157-9o2j34k1qff8cc1apqbec9so842istai.apps.googleusercontent.com&response_type=token&redirect_uri=https://script.google.com/macros/s/AKfycbxlPnt0dpuOhLOcydEJ0GdWSPD2BFf3W3BvMTLY6pJP/dev&scope=https://www.googleapis.com/auth/bigquery&include_granted_scopes=true&state=pass-through";
        
        // const searchParams = new URLSearchParams(paramsString);
        
        // document.getElementById("outData01").innerHTML = searchParams;

        // var URL = 'https://accounts.google.com/o/oauth2/v2/auth?'+searchParams;

        // Response - DOES NOT WORK
        // https://accounts.google.com/o/oauth2/v2/auth?q=URLUtils.searchParams&client_id=982455389157-9o2j34k1qff8cc1apqbec9so842istai.apps.googleusercontent.com&response_type=token&redirect_uri=https%3A%2F%2Fscript.google.com%2Fmacros%2Fs%2FAKfycbxlPnt0dpuOhLOcydEJ0GdWSPD2BFf3W3BvMTLY6pJP%2Fdev&scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fbigquery&include_granted_scopes=true&state=pass-through
        // 
        // Scheme: https
        // Host: 	accounts.google.com
        // Filename: 	/o/oauth2/v2/auth

        // Submits the form using JavaScript: can not do redirects, so one gets a CORS error
        // try {
          // Output: Print text part to a text area
          //await fetch(URL, options).then(res => res).then(res => {document.getElementById("outData01").innerHTML = JSON.stringify(res);})

        //   await fetch(URL).then(res => res).then(res => {document.getElementById("outData01").innerHTML = 'here';})

        // } catch (error) {
        //   document.getElementById("outData01").innerHTML = error;
        // }

        // -----------------------------------

        // Try 8:

        // const formData = new FormData(document.querySelector('#id_of_form'));

        // Convert form data to query string
        // const searchParams = new URLSearchParams(formData);

        // document.getElementById("outData01").innerHTML = searchParams;

        // var URL = 'https://accounts.google.com/o/oauth2/v2/auth?'+searchParams;

        // Submits the form using JavaScript: can not do redirects, so one gets a CORS error
        // try {
          // Output: Print text part to a text area
          //await fetch(URL, options).then(res => res).then(res => {document.getElementById("outData01").innerHTML = JSON.stringify(res);})

        //   await fetch(URL).then(res => res).then(res => {document.getElementById("outData01").innerHTML = 'here';})

        // } catch (error) {
        //   document.getElementById("outData01").innerHTML = error;
        // }

        // -----------------------------------

        // Try 9: call the form and assign the response to a function
        // Submits the form using the browser: can do redirects
        const formData = new FormData(document.querySelector('#id_of_form'));
        formData.onsubmit = checkForm;



        // -----------------------------------
        
        
        
        

      }



      // -------------------

      function checkForm(thisForm){

        // Works
        // document.getElementById("outData01").innerHTML = "here";

        // -----------------------------------

        // var form = document.forms[0];
        // document.getElementById("outData01").innerHTML = form;

        // Response: HTML Format

        // -----------------------------------
        
        // IF <form action="https://accounts.google.com/o/oauth2/v2/auth" method="POST" id="id_of_form" onsubmit="return checkForm()">
        // var client_id = document.getElementById("id_of_form").elements["client_id"].value;
        // localStorage.setItem('client_id', client_id);

        // WORKS!!

        // -----------------------------------

        // IF <form action="https://accounts.google.com/o/oauth2/v2/auth" method="POST" id="id_of_form" onsubmit="return checkForm(this)">
        // localStorage.setItem("anotherway_client_id", thisForm.client_id.value)

        // WORKS:

        // -----------------------------------

        // document.querySelector('#id_of_form').elements.namedItem('client_id')

        // -----------------------------------
        
        // try calling the eventlistener upon submitting the form
        // window.addEventListener("locationchange", function(){ 
        
        //   localStorage.setItem('test0', "locationchange_eventlistener");

          // does not save anything
        //   google.script.run.withSuccessHandler(function(result){ localStorage.setItem('get_top_url', result); }).getTopUrl(); 
        // });

        // DOES NOT WORK

        // -----------------------------------


      }

      // -------------------



      // ----------------------------------------
      // STEP 1: Decode the server response 
      // ----------------------------------------

      // *** Problem: does not save anything to localStorage ***
      // var fragmentString = 

      // Parse query string to see if page request is coming from OAuth 2.0 server.
      // var params = {};
      // var regex = /([^&=]+)=([^&]*)/g, m;
      // while (m = regex.exec(fragmentString)) {
      //   params[decodeURIComponent(m[1])] = decodeURIComponent(m[2]);
      // }

      // if (Object.keys(params).length > 0) {
      //   localStorage.setItem('oauth2-test-params', JSON.stringify(params) );
      //   if (params['state'] && params['state'] == 'try_sample_request') {
          
          // Get access_token from page
      //     var params = JSON.parse(localStorage.getItem('oauth2-test-params'));
      //     var ACCESS_TOKEN = params['access_token'];

          // Call a method
          // trySampleRequest();
          // fetch_post2bigquery();
      //   }
      // }

      // -------------------

      // Try to save a simple string to localStorage - WORKS
      // localStorage.setItem('test_key', 'test_value');

      // -------------------

      // Nothing is in the parameters fragmentString, so nothing gets saved to localStorage
      // localStorage.setItem('fragmentString', fragmentString);

      // -------------------
     


      // ----------------------------------------
      // STEP 2: Read response data from body of page
      // ----------------------------------------
      function read_response_data(){
        
        // If a POST request is performed : read params from the body
        // Result: there is no variable params defined after the page refreshes

        // need to figure out how to read the body - this outputs the html of the body - it is not what I want
        // document.getElementById("outData1").innerHTML =  document.body.innerHTML;

        // I need to read parmas in the body
        // Uncaught ReferenceError: params is not defined
        // document.getElementById("outData0").innerHTML =  params;

        // -------------------

        // -------------------
        // If a GET request is performed: get URL from the refreshed page
        // -------------------

        // Way 0: location.hash.substring(1)
        // No response
        // document.getElementById("outData1").innerHTML = window.location.hash.substring(1);

        // -------------------
        
        // Way 1: location.href.match
        //var match = window.location.href.match(/^[^#]+#([^?]*)\??(.*)/);
        //var hashpath = match[1];
        //var parameters = match[2];

        // Returns the url of the sandboxFrame
        // I always obtain the incorrect URL: https://n-r2pbtrsqsf2gx46eesq7qdxgjigesuvhrdh5waq-0lu-script.googleusercontent.com/userCodeAppPanel
        //document.getElementById("outData1").innerHTML = window.location.href;

        // -------------------

        // https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy#cross-origin_script_api_access
        // Uncaught DOMException: Permission denied to get property "href" on cross-origin object
        // document.getElementById("outData1").innerHTML = window.top.location.href;

        // -------------------

        // *** MOST SUCCESS - getting the original url ***
        // Returns the original url before the form submission
        // Result: https://script.google.com/macros/s/AKfycbxlPnt0dpuOhLOcydEJ0GdWSPD2BFf3W3BvMTLY6pJP/dev
        google.script.run.withSuccessHandler(function(result){document.getElementById("outData1").innerHTML = result;}).getTopUrl();

        
        // https://script.google.com/macros/s/AKfycbxlPnt0dpuOhLOcydEJ0GdWSPD2BFf3W3BvMTLY6pJP/dev#state=pass-through&access_token=ya29.a0AfB_byAdn7aH9Biod4jB6FqOBTcB9faQ5ALpbybiVD-Kfy4fsIeDeMrgQf7DCp1TwE0WvQJIibRA0jkG7mtzXHLzcJdNJatwqe7Nb7OXlh_eNB1CPhqjCS3qOY72HbuUtteYYyW1yP6q2E0rONdD3rjdKynqjqZj9pUaCgYKAewSARASFQHGX2MiHLTCmjiWQwYIf7_VYAffTQ0170&token_type=Bearer&expires_in=3599&scope=https://www.googleapis.com/auth/bigquery%20https://www.googleapis.com/auth/cloud-platform%20https://www.googleapis.com/auth/cloud-platform.read-only


        // -------------------

        // Returns nothing
        // google.script.run.withSuccessHandler(function(result){document.getElementById("outData1").innerHTML = result;}).get_url();

        // -------------------

        // google.script.run.withSuccessHandler(function(result){document.getElementById("outData1").innerHTML = result;}).get_parameters_from_event();

        // -------------------
        
        // Save GET/POST response from URL and save to localStorage
        // document.getElementById("outData1").innerHTML =  localStorage.getItem('test_key');

      }



      
      
      

      // ----------------------------------------
      // STEP 3: Fetch POST to BigQuery table - WORKS
      // ----------------------------------------
      async function fetch_post2bigquery_way0(){

        var payAccess_key = document.getElementById("payAccess_key").value;
        // document.getElementById("outData1").innerHTML = payAccess_key;
        //var payAccess_key = "username4";

        var projectId = "observations-of-data-scientist";

        var location = "europe-west9";

        var url = "https://bigquery.googleapis.com/bigquery/v2/projects/"+projectId+"/queries";

        // -----------------------------------
        
        var headers = {"Content-Type": "application/json", "Authorization": 'Bearer ' + ACCESS_TOKEN};

        var data = {
                  "query": "INSERT INTO payAccess.payAccess_table (accesskey, paid) VALUES('"+payAccess_key+"', true)", 
                  "location": location, 
                  "useLegacySql": false
                  };

        var options = {method : 'post', headers: headers, body : JSON.stringify(data)};

        // {"kind":"bigquery#queryResponse","schema":{"fields":[{"name":"accesskey","type":"STRING"},{"name":"paid","type":"BOOLEAN"}]},"jobReference":{"projectId":"observations-of-data-scientist","jobId":"job_Pp7-j7SSw-VQF2Nqc1qBhoTzna9Y","location":"europe-west9"},"totalBytesProcessed":"0","jobComplete":true,"cacheHit":false,"numDmlAffectedRows":"1","dmlStats":{"insertedRowCount":"1"},"queryId":"job_Pp7-j7SSw-VQF2Nqc1qBhoTzna9Y"}

        // -----------------------------------

        try {
          // Output: Print text part to a text area
          await fetch(url, options).then(res => res.json()).then(res => {document.getElementById("outData2").innerHTML = JSON.stringify(res);})

        } catch (error) {
          document.getElementById("outData2").innerHTML = error;
        }

      }
      // -----------------------------------





      </script>


  </body>
</html>



------------------------------------------------------------------------------------------------------
rest_api2
------------------------------------------------------------------------------------------------------
<!DOCTYPE html>
<html>
  <head>
    <base target="_top">
  </head>
  <body>
    
    <!-- HTML -->

    <!-- <button id="step0_call_url_in_window_way0" onclick="step0_call_url_in_window_way0()" style='text-align: left;'>step0_call_url_in_window_way0</button> -->

    <!-- <button id="step0_call_url_in_window_way1" onclick="step0_call_url_in_window_way1()" style='text-align: left;'>step0_call_url_in_window_way1</button> -->

    <button id="sequential_events" onclick="sequential_events()" style='text-align: left;'>sequential_events</button>

    <br><br>

    <textarea id="outData0" style='text-align: left;' rows="4" cols="50" placeholder="outData0"></textarea>

    <br><br>

    <textarea id="outData1" style='text-align: left;' rows="4" cols="50" placeholder="outData1"></textarea>

    <br><br>

    <button id="get_url_on_newpage" onclick="get_url_on_newpage()" style='text-align: left;'>get_url_on_newpage</button>

    <br><br>

    <textarea id="outData2" style='text-align: left;' rows="4" cols="50" placeholder="outData2"></textarea>

    <br><br>

    <button id="fetch_post2bigquery" onclick="fetch_post2bigquery()" style='text-align: left;'>fetch_post2bigquery</button>

    <br><br>

    <textarea id="outData3" style='text-align: left;' rows="4" cols="50" placeholder="outData3"></textarea>

    <br><br>


    <!-- JAVASCRIPT -->
    <script>
      
      // -------------------
      // Start monitoring events as soon as script starts
      // -------------------
      // it seems like it is always running, so I can just start it running at the start of script
      // window.addEventListener("locationchange", function(){ document.getElementById("outData1").innerHTML = window.location.href; });

      // -------------------

      var SCOPES = 'https://www.googleapis.com/auth/bigquery https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud-platform.read-only';

      var CLIENT_ID = '982455389157-9o2j34k1qff8cc1apqbec9so842istai.apps.googleusercontent.com';

      var REDIRECT_URI = 'https://script.google.com/macros/s/AKfycbxlPnt0dpuOhLOcydEJ0GdWSPD2BFf3W3BvMTLY6pJP/dev';
      // OR
      // var REDIRECT_URI = 'https://script.google.com';

      var CLIENT_SECRET = "";  // for trading in the authorization_code for the access_token

      // -------------------


      function get_url_on_newpage(){
        var fragmentString = location.hash.substring(1);
        document.getElementById("outData0").innerHTML = fragmentString;

        // Parse query string to see if page request is coming from OAuth 2.0 server.
        var params = {};
        var regex = /([^&=]+)=([^&]*)/g, m;
        while (m = regex.exec(fragmentString)) {
          params[decodeURIComponent(m[1])] = decodeURIComponent(m[2]);
        }

        if (Object.keys(params).length > 0) {
          localStorage.setItem('oauth2-test-params', JSON.stringify(params) );
          if (params['state'] && params['state'] == 'try_sample_request') {
            
            // Get access_token from page
            var params = JSON.parse(localStorage.getItem('oauth2-test-params'));
            var ACCESS_TOKEN = params['access_token'];

            // Call a method
            // trySampleRequest();
            fetch_post2bigquery();
          }
        }
      }

      // -------------------

      async function total_process(){

        // callback
        // await step0_call_url_in_window_way1().then(function () {var returnedurl = window.location.href; document.getElementById("outData0").innerHTML = returnedurl;})

        // promise, then callback
        // await step0_call_url_in_window_way1().then(res => res).then(res => {setTimeout( function() { var returnedurl = window.location.href; document.getElementById("outData0").innerHTML = returnedurl; }, 3000)})
        
        // It waits to send the form
        // await step0_call_url_in_window_way1()
        // setTimeout( function() { var returnedurl = window.location.href; document.getElementById("outData0").innerHTML = returnedurl; }, 3000)

        await step0_call_url_in_window_way1();
      }

      // -------------------

      // Different ways to make function calls in sequence

      // return a promise of function_name, and then return a callback of the promise - you always have an output from function_name (like undefined)
      // await function_name().then(response => response.json).then(response => { output res or other commands})

      // return a callback of function_name, and do a sequential function call
      // await function_name().then(response => (do something with response)).then(function() {do other commands without response})

      // return the output of function_name
      // await function_name().then(function(response) {output response or other commands})

      // call function_name and then run some other commands sequentially
      // await function_name().then(function() {other commands})

      // await function_name().then(() => {other commands})

      async function sequential_events(){

        try {
          // await step0_call_url_in_window_way1();

          // DOES NOT WORK: It returns the callback before page/url changes
          await total_process().then(() => { 
            
            // {}
            google.script.url.getLocation(function(location) {document.getElementById("outData0").innerHTML = JSON.stringify(location.parameters, null, 2)})
            // OR
            // google.script.run.withSuccessHandler(function(result){var url = e.parameter.url; document.getElementById("outData0").innerHTML = url;}).get_url();
            // OR
            var winRef = window.location.href; 
            // The steps are:
          // [0] the initial url is the deployment URL, [1] the URL changes to something else (https://n-r2pbtrsqsf2gx46eesq7qdxgjigesuvhrdh5waq-0lu-script.googleusercontent.com/userCodeAppPanel)
           // document.getElementById("outData0").innerHTML = winRef; 
          // [2] it contacts OAuth2 with GET
          // [3] OAuth2 changes the URL to the redirect_uri with the authorization_code  
          // so calling it here means that I am likely to start monitoring at or after step [1]

          // if the evenlister is always running after it is called like a trigger function running for infinity, shouldn't it catch all paage changes regardless of timing

          // start monitoring for a page change where the url contains #
          // window.addEventListener("hashchange", function(){ document.getElementById("outData1").innerHTML = window.location.href; });

          // Maybe slowing down the execution of page events makes it run
          // wait 5000 ms before starting to monitor a url change
          setTimeout( function() { document.getElementById("outData1").innerHTML = 'here'; }, 500);

          return winRef;
          })
          .then(function(winRef) {
            for (var i=0; i < 500; i++){
              // https://developers.google.com/apps-script/guides/html/reference/url#locationObject
              // google.script.url.getLocation(function(location) {document.getElementById("outData1").innerHTML = JSON.stringify(location.parameters, null, 2)})
              // OR
              // google.script.run.withSuccessHandler(function(result){var url = e.parameter.url;document.getElementById("outData1").innerHTML = url;}).get_url();
              // OR
              document.getElementById("outData1").innerHTML = window.location.href;
            }
            // OR
            // window.addEventListener("hashchange", function(){ })
          })

          // The final url is 
          // https://script.google.com/macros/s/AKfycbxlPnt0dpuOhLOcydEJ0GdWSPD2BFf3W3BvMTLY6pJP/dev#state=pass-through&access_token=ya29.a0AfB_byCgmk7gR6Brji_3HFOwLpEGDGgKmQG_kdgT-RkYgYw2mCj2ysLgf5bWBt0tiZuryzSE7qPSJ75iN9w66sA2BkMj6qdY_TWVjty2f3zc8b4bOlac0ffehvnxYzxiS_acySbCNV8rMXGhjUsZWjeBEvayoPU-bQaCgYKAXwSARASFQHGX2MiOnJ28zZx_7iH7fKPfb8Ijg0169&token_type=Bearer&expires_in=3599&scope=https://www.googleapis.com/auth/bigquery

        } catch (error) {
          document.getElementById("outData1").innerHTML = error;
        }
        

      }




      function step0_call_url_in_window_way1(){

        // https://developers.google.com/identity/protocols/oauth2/javascript-implicit-flow

        // Google's OAuth 2.0 endpoint for requesting an access token
        var oauth2Endpoint = 'https://accounts.google.com/o/oauth2/v2/auth';

        // var returnedurl = window.location.href; 
        // document.getElementById("outData0").innerHTML = returnedurl;
        // https://n-r2pbtrsqsf2gx46eesq7qdxgjigesuvhrdh5waq-0lu-script.googleusercontent.com/userCodeAppPanel

        // Create <form> element to submit parameters to OAuth 2.0 endpoint.
        var form = document.createElement('form');
        form.setAttribute('method', 'GET'); // Send as a GET request.
        form.setAttribute('action', oauth2Endpoint);

        // Parameters to pass to OAuth 2.0 endpoint.
        var params = {'client_id': CLIENT_ID, 'response_type': 'token', 'redirect_uri': REDIRECT_URI, 'scope': SCOPES, 'include_granted_scopes': 'true', 'state': 'pass-through value'};

        // Add form parameters as hidden input values.
        for (var p in params) {
          var input = document.createElement('input');

          // input.setAttribute('type', 'visible');
          // input.setAttribute('name', p);
          // input.setAttribute('value', params[p]);
          // OR
          input.innerHTML = '<input type="visible" name='+p+' value='+params[p]+'>';

          form.appendChild(input);
        }

        // Add form to page and submit it to open the OAuth 2.0 endpoint.
        document.body.appendChild(form);
        form.submit();

      }

      // -------------------

      // Fetch POST to BigQuery table
      async function fetch_post2bigquery(){

        // var payAccess_key = document.getElementById("payAccess_key").value;
        // document.getElementById("outData1").innerHTML = payAccess_key;
        var payAccess_key = "username3";

        var projectId = "observations-of-data-scientist";
        // ar datasetId = "payAccess";
        // var tableId = "payAccess_table";

        // desired columns wanted from the table
        // var selectedFields = "accesskey,paid";
        // var view = "BASIC"; 
        // var alt = "json (default)";
        // var prettyPrint = true;
        // var quotaUser = 256;

        var location = "europe-west9";

        //var url = `https://bigquery.googleapis.com/bigquery/v2/projects/${projectId}/queries`;
        var url = "https://bigquery.googleapis.com/bigquery/v2/projects/"+projectId+"/queries";

        // -----------------------------------
        
        var headers = {"Content-Type": "application/json", "Authorization": 'Bearer ' + ACCESS_TOKEN};

        // var data = {"query": "INSERT INTO $dataset_name.$TABLE_NAME (accesskey, paid) VALUES('user2', true);", 'location': location, "useLegacySql": false};
        var data = {
                  "query": "INSERT INTO $dataset_name.$TABLE_NAME (accesskey, paid) VALUES("+payAccess_key+", true);", 
                  "location": location, 
                  "useLegacySql": false
                  };

        var options = {method : 'post', headers: headers, body : JSON.stringify(data)};

        // -----------------------------------

        try {
          // Output: Print text part to a text area
          await fetch(url, options).then(res => res.json()).then(res => {document.getElementById("outData2").innerHTML = JSON.parse(JSON.stringify(res));})

        } catch (error) {
          document.getElementById("outData2").innerHTML = error;
        }

      }




      </script>


  </body>
</html>


------------------------------------------------------------------------------------------------------
rest_api3
------------------------------------------------------------------------------------------------------
function doGet(e) {

    var arrayStored = HtmlService.createHtmlOutputFromFile('rest_api3');
    console.log(arrayStored);

    //localStorage.setItem("accessToken", accessToken)
    // Store the variable in script properties
    // PropertiesService.getScriptProperties().setProperty('accessToken', accessToken);

    arrayStored.access_token = e.parameters.access_token;

    return arrayStored
    // the e argument represents an event parameter that can contain information about any request parameters
}


// Need to do a GET to the Deployed HTML page

async function print_scrape_text(URL) {

  // GET fetch REST API
  var response = UrlFetchApp.fetch(URL);
  
  // Obtain the html page: it is a lot of text so it is necessary to output only certain parts of the HTML page
  // const pageHTML = response.getContentText();
  
  // need to figure out where is access_token in pageHTML
  
  console.log(response)
  
  return response
}


function get_parameters_from_event(e) {
  var params = JSON.stringify(e);
  return ContentService.createTextOutput(params).setMimeType(ContentService.MimeType.JSON);
}


// Just returns the original page url
function getTopUrl(){
  return ScriptApp.getService().getUrl();
}



function doGet(e) {

  // Needs to receive POST requests with ONE parameter called username
  
  // It says that if I add ?action=get&username=username_value to my deployed URL I can get username_value
  // Q: how does my webapp_server even know that it wants to receive username_value?
  // Q: how do I add the 
  //  - and then send the username POST_request_payload to be confirmed with my account token



  // Maybe server should be attached to a spreadsheet to temporarily store the username requests - and then send the username to the 
  // BigQuery database (dynami)
  var arrayStored = HtmlService.createHtmlOutputFromFile('index');

  console.log(arrayStored);

  //localStorage.setItem("accessToken", accessToken)
  // Store the variable in script properties
  // PropertiesService.getScriptProperties().setProperty('accessToken', accessToken);

  arrayStored.access_token = e.parameters.access_token;

  return arrayStored
  // the e argument represents an event parameter that can contain information about any request parameters
}


// ---------------------------------------------------

// Need to do a GET to the Deployed HTML page

async function print_scrape_text(URL) {

  // GET fetch REST API
  var response = UrlFetchApp.fetch(URL);
  
  // Obtain the html page: it is a lot of text so it is necessary to output only certain parts of the HTML page
  // const pageHTML = response.getContentText();
  
  // need to figure out where is access_token in pageHTML
  
  console.log(response)
  
  return response
}

// ---------------------------------------------------

function get_parameters_from_event(e) {
  var params = JSON.stringify(e);
  return ContentService.createTextOutput(params).setMimeType(ContentService.MimeType.JSON);
}

// ---------------------------------------------------

// Just returns the original page url
function getTopUrl(){
  return ScriptApp.getService().getUrl();
}


// ---------------------------------------------------



<!DOCTYPE html>
<html>
  <head>
    <base target="_top">
  </head>
  <body>
    
    <!-- ---------------------------------- -->

    <form action="https://accounts.google.com/o/oauth2/v2/auth" method="POST" id="id_of_form" onsubmit="return checkForm(this)">
    <div>
      <input type="text" name="client_id" id="client_id" value="982455389157-9o2j34k1qff8cc1apqbec9so842istai.apps.googleusercontent.com" style="display:none;">
    </div>
    <div>
      <input type="text" name="response_type" id="response_type" value='token' style="display:none;">
    </div>
    <div>
      <input type="text" name="redirect_uri" id="redirect_uri" value="https://script.google.com/macros/s/AKfycbxlPnt0dpuOhLOcydEJ0GdWSPD2BFf3W3BvMTLY6pJP/dev" style="display:none;">
    </div>
    <div>
      <!-- <input type="text" name="scope" id="scope" value="https://www.googleapis.com/auth/bigquery" style="display:none;"> -->
      <input type="text" name="scope" id="scope" value="https://www.googleapis.com/auth/bigquery https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud-platform.read-only" style="display:none;">
    </div>
    <div>
      <input type="text" name="include_granted_scopes" id="include_granted_scopes" value='true' style="display:none;">
    </div>
    <div>
      <input type="text" name="state" id="state" value='pass-through' style="display:none;">
    </div>
    <div>
      <input type="text" name="expires_in" id="expires_in" value='43200' style="display:none;">
    </div>
    <button name="submit_button" value='submit_button' id="Submit" style='text-align: left;'>Submit</button>
    </form>

    <!-- ---------------------------------- -->


    


    <!-- JAVASCRIPT -->

    <script>

      // -------------------
      // Verify that parameters save to MY PC
      // I can only collect user information, and I must send the information from MY PC
      // -------------------

      // Read from the submitted form
      // Display the key/value pairs on the form before and AFTER the GET/POST
      var formObject = document.getElementById("id_of_form");
      var form_elements = formObject.elements;

      for (var i=0; i<form_elements.length; i++){
        var key_value_pair = form_elements[i]; 

        localStorage.setItem(key_value_pair.name, key_value_pair.value)
      }
      // ----------------------------------------




      // ----------------------------------------
      // STEP 3: Fetch POST to BigQuery table - WORKS
      // ----------------------------------------
      async function fetch_post2bigquery_way0(){

        var payAccess_key = document.getElementById("payAccess_key").value;
        // document.getElementById("outData1").innerHTML = payAccess_key;
        //var payAccess_key = "username4";

        var projectId = "observations-of-data-scientist";

        var location = "europe-west9";

        var url = "https://bigquery.googleapis.com/bigquery/v2/projects/"+projectId+"/queries";

        // -----------------------------------
        
        var headers = {"Content-Type": "application/json", "Authorization": 'Bearer ' + ACCESS_TOKEN};

        var data = {
                  "query": "INSERT INTO payAccess.payAccess_table (accesskey, paid) VALUES('"+payAccess_key+"', true)", 
                  "location": location, 
                  "useLegacySql": false
                  };

        var options = {method : 'post', headers: headers, body : JSON.stringify(data)};

        // {"kind":"bigquery#queryResponse","schema":{"fields":[{"name":"accesskey","type":"STRING"},{"name":"paid","type":"BOOLEAN"}]},"jobReference":{"projectId":"observations-of-data-scientist","jobId":"job_Pp7-j7SSw-VQF2Nqc1qBhoTzna9Y","location":"europe-west9"},"totalBytesProcessed":"0","jobComplete":true,"cacheHit":false,"numDmlAffectedRows":"1","dmlStats":{"insertedRowCount":"1"},"queryId":"job_Pp7-j7SSw-VQF2Nqc1qBhoTzna9Y"}

        // -----------------------------------

        try {
          // Output: Print text part to a text area
          await fetch(url, options).then(res => res.json()).then(res => {document.getElementById("outData2").innerHTML = JSON.stringify(res);})

        } catch (error) {
          document.getElementById("outData2").innerHTML = error;
        }

      }
      // -----------------------------------


  </body>
</html>




// ---------------------------------------------------
// webapp_server
// ---------------------------------------------------


// ------------------------------
// index.html
// ------------------------------
<!DOCTYPE html>
<html>
  <head>
  </head>
  <body>
    
    <!-- HTML -->

    <textarea id="outData0" style='display:block; text-align: left;' rows="1" cols="50" placeholder="outData0"></textarea>

    <br><br>

    <!-- ---------------------------------- -->


    <!-- JAVASCRIPT -->

    <script>
      // google.script.run.withSuccessHandler(function(result){ }).doPost();


    </script>

  </body>
</html>






// ------------------------------
// Code.gs
// ------------------------------
function onOpen() {
  var ui = SpreadsheetApp.getUi();
  ui.createMenu('App functionality')
      .addItem('Run a function', 'test_output')
      .addToUi();
}

// ---------------------------------------------------

function doGet(e) {
  
  // The endpoint returns the HTML page if a GET request is made to the url
  return HtmlService.createHtmlOutputFromFile('index');

  // The endpoint returns the url if a GET request is made to the url
  // var url = e.parameter.url;
  //return ContentService.createTextOutput(e.parameter.username);
}

// ---------------------------------------------------

// This function allows for an endpoint to receive a POST request.
// One can create as many parameters under the variable parms as they like.
// text_sent_2_client_if_successful_POSTrequest is the text that is sent to the client who makes a successful POST request

function doPost(e) {
  // https://developers.google.com/apps-script/guides/web

  // Declare POST request variable
  var username = e.parameter.username;


  // Try 0: NO while loop
  // -----------------------------
  // Way 0: Obtain the value that was sent from the client, without while loop
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = ss.getSheetByName("Sheet1");

  var numRows = sheet.getLastRow() + 1;
  var cell_letter = "D"
  var str_val = cell_letter.concat(numRows.toString(), ":", cell_letter, numRows.toString())

  var range = sheet.getRange(str_val);
  range.setValues([ [username] ]);
  // -----------------------------

  // -----------------------------
  // Way 1: Store variable in environmental variables
  PropertiesService.getScriptProperties().setProperty('username', 'test');
  // -----------------------------


  // OR


  /*
  // -----------------------------
  // Try 1: while loop to obtain value from POST request
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = ss.getSheetByName("Sheet1");
  // var numRows = sheet.getLastRow() + 1;
  // var cell_letter = "C"
  // var str_val = cell_letter.concat(numRows.toString(), ":", cell_letter, numRows.toString())
  // var range = sheet.getRange(str_val);
  
  // Declaring parameters that the endpoint should receive as data in the POST request
  // Stay in while loop, until a value is received; the doPost runs too fast maybe
  while (username == null) {
    numRows = numRows + 1;
    str_val = cell_letter.concat(numRows.toString(), ":", cell_letter, numRows.toString())
    range.setValues([ ["no value"] ]);
  }

  // -----------------------------
  // Way 0: Obtain the value that was sent from the client, without while loop
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = ss.getSheetByName("Sheet1");

  var numRows = sheet.getLastRow() + 1;
  var cell_letter = "D"
  var str_val = cell_letter.concat(numRows.toString(), ":", cell_letter, numRows.toString())

  var range = sheet.getRange(str_val);
  range.setValues([ [username] ]);
  // -----------------------------

  // -----------------------------
  // Way 1: Store variable in environmental variables
  PropertiesService.getScriptProperties().setProperty('username', 'test');
  // -----------------------------
  */


  // OR


  /*
  while (username != null) {
    
    // -----------------------------
    // Way 0: Obtain the value that was sent from the client, without while loop
    var ss = SpreadsheetApp.getActiveSpreadsheet();
    var sheet = ss.getSheetByName("Sheet1");

    var numRows = sheet.getLastRow() + 1;
    var cell_letter = "D"
    var str_val = cell_letter.concat(numRows.toString(), ":", cell_letter, numRows.toString())

    var range = sheet.getRange(str_val);
    range.setValues([ [username] ]);
    // -----------------------------

    // -----------------------------
    // Way 1: Store variable in environmental variables
    PropertiesService.getScriptProperties().setProperty('username', 'test');
    // -----------------------------
  }
  */

  // Return a response to user who made the post request
  var text_sent_2_client_if_successful_POSTrequest = "POST request received";
  var response = ContentService.createTextOutput(text_sent_2_client_if_successful_POSTrequest);
  
  //var json_response = response.setMimeType(ContentService.MimeType.JSON);
  //var text_response = response.setMimeType(ContentService.MimeType.PLAIN_TEXT);
  
  // Q: Do I need to call doPost? no I do not need to call it. In Google Apps Script, the `doPost` function is automatically triggered when a POST request is made to the endpoint. You can access the POST request parameters directly within the `doPost` function using the `e` parameter.

  return response;
}

// ---------------------------------------------------

function test_output(){

  // GET fetch REST API
  var URL = "https://script.google.com/macros/s/AKfycbxl1_H4WrLDCKVbxzFFiL15sbUBIA_HFSB_vqqzN_SqNDcdUDAISdw8JmQDKOXvK2sZ/exec";

  var response = UrlFetchApp.fetch(URL);
  // var response_short = response.slice(0,200)
  // var response_short = response.substring(0,200);
  var response_short = response[0];


  // Idea 0: maybe the post request data is on the html page of the server. So webscrape the server webpage.
  // If I do not have index.html, it can not webscrape the url of the server

  // -----------------------------

  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = ss.getSheetByName("Sheet1");

  var numRows = sheet.getLastRow() + 1;
  var cell_letter = "C"
  var str_val = cell_letter.concat(numRows.toString(), ":", cell_letter, numRows.toString())

  var range = sheet.getRange(str_val);
  
  range.setValues([ [response_short] ]);

  // -----------------------------

  username2 = PropertiesService.getScriptProperties().getProperty('username');
  var numRows = sheet.getLastRow() + 1;
  var cell_letter = "D"
  var str_val = cell_letter.concat(numRows.toString(), ":", cell_letter, numRows.toString())

  var range = sheet.getRange(str_val);
  range.setValues([ [username2] ]);

  // -----------------------------

}



// ---------------------------------------------------

// ---------------------------------------------------
webapp_client
// ---------------------------------------------------
function doGet() {
  // This creates the webapp for the user to submit their username to a url via a POST request
  return HtmlService.createHtmlOutputFromFile('index');
}


<!DOCTYPE html>
<html>
  <head>
    <base target="_top">
  </head>
  <body>
    
    <!-- HTML -->
    <input id="payAccess_key" type="text" value="" placeholder="Create a unique non-personalized accesskey" rows="1" cols="50" style='text-align: center; width: 400px;'>

    <br><br>

    <!-- ---------------------------------- -->

    <!-- Way 0: send a POST request using a form created by HTML -->
    <!-- This outputs whether the response is successful or not, to: More Tools - Web Developer Tools -->
    <form action="https://script.google.com/macros/s/AKfycbylXxyKOntU1cjG3Aqu79Ggk0AQ__DjMP8q8T1IZz2lR0pOjmXSTIzfH6V6pPcO4qwv/exec" method="GET" id="id_of_form" onsubmit="return checkForm(this)">
    <!-- <label for="username">username</label> -->
    <input type="text" name="username" id="username" value="username" style="display:none;">
    
    <button name="submit_button" value='submit_button' id="Submit" style='text-align: left;'>way0_sendPOST_form_HTML</button>
    </form>
    
    <!-- ---------------------------------- -->


    <br><br>

    <!-- This outputs whether the response is successful or not, to: More Tools - Web Developer Tools -->
    <button id="way1_sendPOST_form_Javascript" onclick="create_form_javascript_way1()" style='text-align: left; display:block;'>way1_sendPOST_form_Javascript</button>

    <br><br>

    <!-- This outputs whether the response is successful or not, to the textarea outData0 -->
    <button id="way2_sendPOST_fetch_Javascript" onclick="fetch_post_2_webapp_server()" style='text-align: left; display:block;'>way2_sendPOST_fetch_Javascript</button>

    <br><br>

    <textarea id="outData0" style='text-align: left;' rows="4" cols="50" placeholder="outData0"></textarea>

    <!-- ---------------------------------- -->

    <!-- JAVASCRIPT -->
    <script>
      
      var URL = 'https://script.google.com/macros/s/AKfycbylXxyKOntU1cjG3Aqu79Ggk0AQ__DjMP8q8T1IZz2lR0pOjmXSTIzfH6V6pPcO4qwv/exec';

      // ----------------------------------------
      // Way 1: send a POST request using a form created by JavaScript
      // ----------------------------------------
      function create_form_javascript_way1() {

        var payAccess_key = document.getElementById("payAccess_key").value;

        // Create <form> element to submit parameters to endpoint.
        var form = document.createElement('form');

        form.setAttribute('method', 'GET'); // Original code
        // form.setAttribute('method', 'POST');

        form.setAttribute('action', URL);

        // Parameters to pass to endpoint.
        var params = {'username': payAccess_key};

        // Add form parameters as hidden input values.
        for (var p in params) {
          var input = document.createElement('input');

          // input.setAttribute('type', 'visible');  // hidden
          // input.setAttribute('name', p);
          // input.setAttribute('value', params[p]);
          // OR
          // input.innerHTML = '<input type="visible" name='+p+' value='+params[p]+'>';
          // OR
          input.innerHTML = '<input style="display:none;" name='+p+' value='+params[p]+'>';
          
          form.appendChild(input);
        }
        // Add form to page and submit it to open the endpoint.
        document.body.appendChild(form);

        form.submit();
      }

      // ----------------------------------------

      function checkForm(thisForm){

        document.getElementById("outData0").innerHTML = "data sent";
      }

      // ----------------------------------------



      // ----------------------------------------
      // Way 2: send a POST request using fetch by HTML
      // ----------------------------------------
      async function fetch_post_2_webapp_server(){

        var payAccess_key = document.getElementById("payAccess_key").value;

        // -----------------------------------
        
        var headers = {"Content-Type": "application/json"};

        var data = {"username": payAccess_key};

        var options = {method : 'post', headers: headers, body : JSON.stringify(data), mode: 'no-cors'};

        // -----------------------------------

        try {
          // Output: Print text part to a text area
          await fetch(URL, options).then(res => res.json()).then(res => {document.getElementById("outData0").innerHTML = JSON.stringify(res);})

        } catch (error) {
          document.getElementById("outData0").innerHTML = error;
        }

      }
      // -----------------------------------
    </script>

  </body>
</html>






// ---------------------------------------------------
// Code.gs example
// ---------------------------------------------------
function doGet(e) {

  // set up defaults
  e = e || {};
  e.parameter = e.parameter || {};
  e.parameter.format = e.parameter.format || "json";
  e.parameter.flight = e.parameter.flight || "ua938";

  // get the flight data
  var result = getFlight(e);

  var content,
  mime = e.parameter.callback ?
  ContentService.MimeType.JAVASCRIPT : ContentService.MimeType.JSON;

  // maybe XML is preferred
  if (e.parameter.format.toLowerCase() === "xml") {
    if (e.parameter.callback) {
    result.status = "no callback possible for xml format";
    }
    mime = ContentService.MimeType.XML;
    content = makeXml (result);
    }
    else {
    // need a JSONP wrapper?
    content = e.parameter.callback ?
    e.parameter.callback + '(' + JSON.stringify(result) + ');' : content;
  }

  // serve up as contentservice
  return ContentService.createTextOutput(content).setMimeType(mime);
}



// integrate call with search in spreadsheet
function getFlight(e) {

  // get the carrier data
  var lookup = new SheetOb()
  .open(Settings.LOOKUP.ID, Settings.LOOKUP.NAME).getData();

  // get the regex based on the interesting airlines
  var rx = new RegExp (getRegex(lookup) ,'i');

  // match against the known airlines flight codes
  var found = rx.exec(e.parameter.flight);

  // store this message if it's got one
  if (found) {
    return {
    status:"ok",
    flight:found[0],
    carrier:found[1],
    name:lookup.filter(function(d) {
      return d[Settings.HEADINGS.CODE].toLowerCase()
      === found[1].toLowerCase();
      })[0][Settings.HEADINGS.NAME]
      };
    }
    else {
      return {
      status:'not found',
      flight:e.parameter.flight
    }
  }
}



// ---------------------------------------------------
// ---------------------------------------------------

function doGet (e) {

  // it does not explain what this function does
  return doGetPattern(e, constructConsentScreen, doSomething, 'googleDatastore');

  // Steps
  // 0. client makes a GET request to webapp_server
  // 1. server has an accessToken to Google, and will make a request on behalf of the client
  // 2. server does a POST request to Google to use a service
  //         - one gives: accessToken, consentUrl, redirectUrl and Google does all the rest of the programming - I have no clue what it does - it gives a response to the server that everything is ok or not

  // So I can not copy how to make a client-server request from this example

}

// ---------------------------------------------------

function doSomething (accessToken) {
var options = {
method: "POST",
contentType : "application/json" ,
muteHttpExceptions : true,
headers: {
"authorization": "Bearer " + accessToken,
},
payload:JSON.stringify({
"query": {
"kinds": [{"name":"polymerdbab"}]
}
})
};
var result = UrlFetchApp.fetch(
"https://www.googleAPIs.com/datastore/v1beta2/" +
"datasets/xliberationdatastore/runQuery"
options);
return HtmlService.createHtmlOutput (' it worked ' +
accessToken + '<br>' + result.getContentText());
}
// ---------------------------------------------------

function constructConsentScreen (consentUrl, redirectUrl) {
  return '<p>Redirect URI to be added to cloud console is ' +
redirectUrl + '</p><a href = "' + consentUrl + '">Click to authenticate to datastore</a> ';
}
